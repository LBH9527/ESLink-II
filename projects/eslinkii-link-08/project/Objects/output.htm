<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Nov 16 15:20:39 2018
<BR><P>
<H3>Maximum Stack Usage =       1592 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBD_CLS_EP_BULK_Event &rArr; USBD_CLS_EP_BULKOUT_Event &rArr; USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; prog_process_command &rArr; download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[42]">ADC0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[64]">ADC1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[87]">CLOCK_CONFIG_FllStableDelay</a> from clock_config.o(i.CLOCK_CONFIG_FllStableDelay) referenced from clock_config.o(i.BOARD_BootClockRUN)
 <LI><a href="#[43]">CMP0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[44]">CMP1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[53]">DAC0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[75]">DMA0_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[1b]">DMA0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[76]">DMA1_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[1c]">DMA1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[77]">DMA2_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[1d]">DMA2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[78]">DMA3_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[1e]">DMA3_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[79]">DMA_Error_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2b]">DMA_Error_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[71]">DefaultISR</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[71]">DefaultISR</a> from startup_mk22f12810.o(.text) referenced 153 times from startup_mk22f12810.o(RESET)
 <LI><a href="#[2d]">FTF_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[45]">FTM0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[46]">FTM1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[47]">FTM2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7a]">I2C0_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[33]">I2C0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7b]">I2C1_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[34]">I2C1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7f]">I2S0_Rx_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[38]">I2S0_Rx_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7e]">I2S0_Tx_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[37]">I2S0_Tx_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[30]">LLWU_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[55]">LPTMR0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[80]">LPUART0_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[39]">LPUART0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2f]">LVD_LVW_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[54]">MCG_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2c]">MCM_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4f]">PDB0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4b]">PIT0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4c]">PIT1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4d]">PIT2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4e]">PIT3_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[56]">PORTA_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[57]">PORTB_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[58]">PORTC_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[59]">PORTD_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5a]">PORTE_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[49]">RTC_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4a]">RTC_Seconds_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2e]">Read_Collision_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6f]">Reserved100_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[70]">Reserved101_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1f]">Reserved20_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[20]">Reserved21_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[21]">Reserved22_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[22]">Reserved23_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[23]">Reserved24_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[24]">Reserved25_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[25]">Reserved26_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[26]">Reserved27_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[27]">Reserved28_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[28]">Reserved29_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[29]">Reserved30_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2a]">Reserved31_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[32]">Reserved39_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[40]">Reserved53_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[41]">Reserved54_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[48]">Reserved61_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[51]">Reserved70_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[52]">Reserved71_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5c]">Reserved81_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5d]">Reserved82_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5e]">Reserved83_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5f]">Reserved84_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[60]">Reserved85_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[61]">Reserved86_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[62]">Reserved87_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[63]">Reserved88_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[65]">Reserved90_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[66]">Reserved91_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[67]">Reserved92_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[68]">Reserved93_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[69]">Reserved94_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6a]">Reserved95_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6b]">Reserved96_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6c]">Reserved97_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6d]">Reserved98_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6e]">Reserved99_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7c]">SPI0_DriverIRQHandler</a> from fsl_dspi.o(i.SPI0_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[35]">SPI0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7d]">SPI1_DriverIRQHandler</a> from fsl_dspi.o(i.SPI1_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5b]">SWI_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[73]">SystemInit</a> from system_mk22f12810.o(i.SystemInit) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[82]">UART0_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[3b]">UART0_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[81]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[3a]">UART0_RX_TX_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[84]">UART1_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[3d]">UART1_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[83]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[3c]">UART1_RX_TX_IRQHandler</a> from uart.o(i.UART1_RX_TX_IRQHandler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[86]">UART2_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[3f]">UART2_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[85]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[3e]">UART2_RX_TX_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[50]">USB0_IRQHandler</a> from usbd_mk20d5.o(i.USB0_IRQHandler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[90]">USBD_CDC_ACM_EP_BULK_Event</a> from usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULK_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8f]">USBD_CDC_ACM_EP_INTIN_Event</a> from usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_INTIN_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8d]">USBD_CLS_EP_BULK_Event</a> from usbd_cls.o(i.USBD_CLS_EP_BULK_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[91]">USBD_Configure_Event</a> from usb_config.o(i.USBD_Configure_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8c]">USBD_EndPoint0</a> from usbd_core.o(i.USBD_EndPoint0) referenced from usb_config.o(.constdata)
 <LI><a href="#[8e]">USBD_HID_EP_INT_Event</a> from usbd_hid.o(i.USBD_HID_EP_INT_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8a]">USBD_Reset_Event</a> from usb_config.o(i.USBD_Reset_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8b]">USBD_SOF_Event</a> from usb_config.o(i.USBD_SOF_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[16]">UsageFault_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[31]">WDOG_EWM_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[74]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[89]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[88]">gpio_key0_down</a> from gpio.o(i.gpio_key0_down) referenced from key.o(i.Key_InitVar)
 <LI><a href="#[8]">isp_chipid_check</a> from isp_prog_intf.o(i.isp_chipid_check) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[2]">isp_init</a> from isp_prog_intf.o(i.isp_init) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[6]">isp_prog_check_empty</a> from isp_prog_intf.o(i.isp_prog_check_empty) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[a]">isp_prog_encrypt_chip</a> from isp_prog_intf.o(i.isp_prog_encrypt_chip) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[5]">isp_prog_erase_chip</a> from isp_prog_intf.o(i.isp_prog_erase_chip) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[3]">isp_prog_init</a> from isp_prog_intf.o(i.isp_prog_init) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[e]">isp_prog_program_flash</a> from isp_prog_intf.o(i.isp_prog_program_flash) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[b]">isp_prog_programe_config</a> from isp_prog_intf.o(i.isp_prog_programe_config) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[9]">isp_prog_read_chip_chksum</a> from isp_prog_intf.o(i.isp_prog_read_chip_chksum) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[7]">isp_prog_read_chipid</a> from isp_prog_intf.o(i.isp_prog_read_chipid) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[c]">isp_prog_read_config</a> from isp_prog_intf.o(i.isp_prog_read_config) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[f]">isp_prog_read_flash</a> from isp_prog_intf.o(i.isp_prog_read_flash) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[4]">isp_prog_uninit</a> from isp_prog_intf.o(i.isp_prog_uninit) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[d]">isp_prog_verify_config</a> from isp_prog_intf.o(i.isp_prog_verify_config) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[10]">isp_prog_verify_flash</a> from isp_prog_intf.o(i.isp_prog_verify_flash) referenced 2 times from isp_prog_intf.o(.data)
 <LI><a href="#[1]">logo_display</a> from link_menu.o(i.logo_display) referenced 2 times from link_menu.o(.data)
 <LI><a href="#[72]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">ofl_program_display</a> from link_menu.o(i.ofl_program_display) referenced 2 times from link_menu.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[28a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[92]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[28c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[28d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[28e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[28f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mk22f12810.o(RESET)
<LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>FTF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>I2S0_Rx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>I2S0_Tx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LPUART0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Reserved100_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>Reserved101_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Reserved21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Reserved22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Reserved23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Reserved24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Reserved25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Reserved26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Reserved27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Reserved28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Reserved30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Reserved31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>Reserved84_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Reserved88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Reserved90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Reserved94_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reserved96_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Reserved97_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved98_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved99_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_delete
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_info
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_info
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_intercept_write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_name
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataSend
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataRead
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_chip
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init_partition
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_userhex_end
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_config_word
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex_end
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word_end
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_sn_display
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[93]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[294]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[295]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[296]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>Ack_DownloadNoStopLab</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_debug.o(i.Ack_DownloadNoStopLab))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[9b]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_BootToFeeMode &rArr; CLOCK_SetFeeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbfs0Clock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[240]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>BOARD_InitPins</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_InitPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>CLOCK_BootToFeeMode</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_BootToFeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_BootToFeeMode &rArr; CLOCK_SetFeeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFeeMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[9f]"></a>CLOCK_EnableUsbfs0Clock</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnableUsbfs0Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableUsbfs0Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[a5]"></a>CLOCK_GetEr32kClkFreq</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, fsl_clock.o(i.CLOCK_GetEr32kClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetEr32kClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a7]"></a>CLOCK_GetFixedFreqClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFixedFreqClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[ac]"></a>CLOCK_GetFllFreq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[ad]"></a>CLOCK_GetFreq</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkDivFreq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_falsh_hw_init
</UL>

<P><STRONG><a name="[af]"></a>CLOCK_GetInternalRefClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetInternalRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b0]"></a>CLOCK_GetOsc0ErClkDivFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkDivFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a6]"></a>CLOCK_GetOsc0ErClkUndivFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkUndivFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>

<P><STRONG><a name="[a9]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[ae]"></a>CLOCK_GetPllFllSelClkFreq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPllFllSelClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetPllFllSelClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9c]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[a3]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>

<P><STRONG><a name="[a4]"></a>CLOCK_SetFeeMode</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fsl_clock.o(i.CLOCK_SetFeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_SetFeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>

<P><STRONG><a name="[9e]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[b6]"></a>DSPI_GetInstance</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SetDummyData
</UL>

<P><STRONG><a name="[b5]"></a>DSPI_MasterInit</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, fsl_dspi.o(i.DSPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DSPI_MasterInit &rArr; DSPI_MasterSetDelayTimes &rArr; DSPI_MasterSetDelayScaler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SetDummyData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterSetDelayTimes
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterSetBaudRate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_GetInstance
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_StopTransfer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_StartTransfer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SetOnePcsPolarity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SetMasterSlaveMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_Enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_falsh_hw_init
</UL>

<P><STRONG><a name="[bc]"></a>DSPI_MasterSetBaudRate</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, fsl_dspi.o(i.DSPI_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DSPI_MasterSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[c0]"></a>DSPI_MasterSetDelayScaler</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, fsl_dspi.o(i.DSPI_MasterSetDelayScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DSPI_MasterSetDelayScaler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterSetDelayTimes
</UL>

<P><STRONG><a name="[bd]"></a>DSPI_MasterSetDelayTimes</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, fsl_dspi.o(i.DSPI_MasterSetDelayTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DSPI_MasterSetDelayTimes &rArr; DSPI_MasterSetDelayScaler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterSetDelayScaler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[be]"></a>DSPI_SetDummyData</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, fsl_dspi.o(i.DSPI_SetDummyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DSPI_SetDummyData
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[c1]"></a>FLASH_Erase</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_user_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
</UL>

<P><STRONG><a name="[c8]"></a>FLASH_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, fsl_flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
</UL>

<P><STRONG><a name="[ca]"></a>FLASH_PrepareExecuteInRamFunctions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_PrepareExecuteInRamFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_run_command
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[cd]"></a>FLASH_Program</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, fsl_flash.o(i.FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
</UL>

<P><STRONG><a name="[ce]"></a>FLASH_VerifyErase</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, fsl_flash.o(i.FLASH_VerifyErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FLASH_VerifyErase &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
</UL>

<P><STRONG><a name="[cf]"></a>FLASH_VerifyProgram</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_VerifyProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>OLED_EndDraw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled.o(i.OLED_EndDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_EndDraw &rArr; OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>

<P><STRONG><a name="[d5]"></a>OLED_PutPixel</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, oled.o(i.OLED_PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>

<P><STRONG><a name="[25c]"></a>OLED_StartDraw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled.o(i.OLED_StartDraw))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>

<P><STRONG><a name="[7c]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_dspi.o(i.SPI0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI0_DriverIRQHandler &rArr; DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_dspi.o(i.SPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_DriverIRQHandler &rArr; DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysTick_Handler &rArr; main_10ms_task &rArr; key_scan &rArr; bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_10ms_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SystemInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_mk22f12810.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[81]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_RX_TX_DriverIRQHandler &rArr; UART0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[83]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_RX_TX_DriverIRQHandler &rArr; UART1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uart.o(i.UART1_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_RX_TX_IRQHandler &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[85]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_RX_TX_DriverIRQHandler &rArr; UART2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>USB0_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, usbd_mk20d5.o(i.USB0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB0_IRQHandler &rArr; USBD_Handler &rArr; USBD_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_or
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>USBD_CDC_ACM_ClearCommFeature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_ClearCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[14e]"></a>USBD_CDC_ACM_DataFree</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataFree))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[e0]"></a>USBD_CDC_ACM_DataRead</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_ACM_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[e8]"></a>USBD_CDC_ACM_DataReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[e2]"></a>USBD_CDC_ACM_DataSend</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_ACM_DataSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[e3]"></a>USBD_CDC_ACM_EP_BULKIN_Event</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CDC_ACM_EP_BULKIN_Event &rArr; USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULK_Event
</UL>

<P><STRONG><a name="[e6]"></a>USBD_CDC_ACM_EP_BULKOUT_Event</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CDC_ACM_EP_BULKOUT_Event &rArr; USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataReceived
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULK_Event
</UL>

<P><STRONG><a name="[90]"></a>USBD_CDC_ACM_EP_BULK_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_ACM_EP_BULK_Event &rArr; USBD_CDC_ACM_EP_BULKOUT_Event &rArr; USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>USBD_CDC_ACM_EP_INTIN_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_INTIN_Event))
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>USBD_CDC_ACM_GetCommFeature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[11c]"></a>USBD_CDC_ACM_GetEncapsulatedResponse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetEncapsulatedResponse))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[ea]"></a>USBD_CDC_ACM_GetLineCoding</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_GetLineCoding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortGetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[ec]"></a>USBD_CDC_ACM_Initialize</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CDC_ACM_Initialize &rArr; USBD_CDC_ACM_PortInitialize &rArr; uart_initialize &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[eb]"></a>USBD_CDC_ACM_PortGetLineCoding</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortGetLineCoding))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetLineCoding
</UL>

<P><STRONG><a name="[ed]"></a>USBD_CDC_ACM_PortInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CDC_ACM_PortInitialize &rArr; uart_initialize &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_cdc_send_event
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Initialize
</UL>

<P><STRONG><a name="[f0]"></a>USBD_CDC_ACM_PortReset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CDC_ACM_PortReset &rArr; uart_reset &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>

<P><STRONG><a name="[f8]"></a>USBD_CDC_ACM_PortSetControlLineState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortSetControlLineState))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetControlLineState
</UL>

<P><STRONG><a name="[f2]"></a>USBD_CDC_ACM_PortSetLineCoding</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortSetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetLineCoding
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>

<P><STRONG><a name="[f4]"></a>USBD_CDC_ACM_Reset</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CDC_ACM_Reset &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset_Event
</UL>

<P><STRONG><a name="[f5]"></a>USBD_CDC_ACM_Reset_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_CDC_ACM_Reset_Event &rArr; USBD_CDC_ACM_Reset &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset_Event
</UL>

<P><STRONG><a name="[f6]"></a>USBD_CDC_ACM_SOF_Event</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CDC_ACM_SOF_Event &rArr; USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataReceived
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOF_Event
</UL>

<P><STRONG><a name="[11f]"></a>USBD_CDC_ACM_SendBreak</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_SendBreak))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[119]"></a>USBD_CDC_ACM_SendEncapsulatedCommand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SendEncapsulatedCommand))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[11a]"></a>USBD_CDC_ACM_SetCommFeature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[f7]"></a>USBD_CDC_ACM_SetControlLineState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetControlLineState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_SetControlLineState
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetControlLineState
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[f9]"></a>USBD_CDC_ACM_SetLineCoding</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CDC_ACM_SetLineCoding &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[fa]"></a>USBD_CLS_BulkOut</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_cls.o(i.USBD_CLS_BulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; prog_process_command &rArr; download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[fc]"></a>USBD_CLS_DataInTransfer</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbd_cls.o(i.USBD_CLS_DataInTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CLS_DataInTransfer &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKIN_Event
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_BulkOut
</UL>

<P><STRONG><a name="[fb]"></a>USBD_CLS_DataOutTransfer</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usbd_user_cls_icd.o(i.USBD_CLS_DataOutTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; prog_process_command &rArr; download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eslink_process_command
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cls_packet_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_BulkOut
</UL>

<P><STRONG><a name="[101]"></a>USBD_CLS_EP_BULKIN_Event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_cls.o(i.USBD_CLS_EP_BULKIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CLS_EP_BULKIN_Event &rArr; USBD_CLS_DataInTransfer &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULK_Event
</UL>

<P><STRONG><a name="[102]"></a>USBD_CLS_EP_BULKOUT_Event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_cls.o(i.USBD_CLS_EP_BULKOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = USBD_CLS_EP_BULKOUT_Event &rArr; USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; prog_process_command &rArr; download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_BulkOut
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULK_Event
</UL>

<P><STRONG><a name="[8d]"></a>USBD_CLS_EP_BULK_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_cls.o(i.USBD_CLS_EP_BULK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = USBD_CLS_EP_BULK_Event &rArr; USBD_CLS_EP_BULKOUT_Event &rArr; USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; prog_process_command &rArr; download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKOUT_Event
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>USBD_CLS_Reset_Event</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_user_cls_icd.o(i.USBD_CLS_Reset_Event))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cls_packet_write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset_Event
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
</UL>

<P><STRONG><a name="[287]"></a>USBD_CLS_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_user_cls_icd.o(i.USBD_CLS_init))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[103]"></a>USBD_ClrStallEP</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.USBD_ClrStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_ClrStallEP &rArr; USBD_ResetEP &rArr; protected_or
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[105]"></a>USBD_ConfigEP</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_mk20d5.o(i.USBD_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ConfigEP &rArr; USBD_ResetEP &rArr; protected_or
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[139]"></a>USBD_Configure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[91]"></a>USBD_Configure_Event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_config.o(i.USBD_Configure_Event))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Configure_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[288]"></a>USBD_Connect</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[107]"></a>USBD_DataInStage</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_DataInStage &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[108]"></a>USBD_DataOutStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_DataOutStage &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[10a]"></a>USBD_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_DirCtrlEP))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[138]"></a>USBD_DisableEP</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_DisableEP))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[13a]"></a>USBD_EnableEP</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_EnableEP))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[8c]"></a>USBD_EndPoint0</STRONG> (Thumb, 776 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_EndPoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_EndPoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_ConfigEP &rArr; USBD_ResetEP &rArr; protected_or
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DirCtrlEP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_MSC_ReqToIF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>USBD_EndPoint0_Out_CDC_ReqToIF</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usbd_core_cdc.o(i.USBD_EndPoint0_Out_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_EndPoint0_Out_CDC_ReqToIF &rArr; USBD_CDC_ACM_SetLineCoding &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetLineCoding
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetCommFeature
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendEncapsulatedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[116]"></a>USBD_EndPoint0_Out_HID_ReqToIF</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_core_hid.o(i.USBD_EndPoint0_Out_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EndPoint0_Out_HID_ReqToIF &rArr; USBD_StatusInStage &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetReport
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[114]"></a>USBD_EndPoint0_Setup_CDC_ReqToIF</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, usbd_core_cdc.o(i.USBD_EndPoint0_Setup_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EndPoint0_Setup_CDC_ReqToIF &rArr; USBD_StatusInStage &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendBreak
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetControlLineState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetLineCoding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetEncapsulatedResponse
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetCommFeature
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_ClearCommFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[112]"></a>USBD_EndPoint0_Setup_HID_ReqToIF</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, usbd_core_hid.o(i.USBD_EndPoint0_Setup_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EndPoint0_Setup_HID_ReqToIF &rArr; USBD_StatusInStage &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetProtocol
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetIdle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReport
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetProtocol
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetIdle
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[113]"></a>USBD_EndPoint0_Setup_MSC_ReqToIF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_config.o(i.USBD_EndPoint0_Setup_MSC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[106]"></a>USBD_HID_Configure_Event</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_Configure_Event))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Configure_Event
</UL>

<P><STRONG><a name="[125]"></a>USBD_HID_EP_INTIN_Event</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, usbd_hid.o(i.USBD_HID_EP_INTIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_HID_EP_INTIN_Event &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SOF_Event
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INT_Event
</UL>

<P><STRONG><a name="[127]"></a>USBD_HID_EP_INTOUT_Event</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, usbd_hid.o(i.USBD_HID_EP_INTOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_HID_EP_INTOUT_Event &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INT_Event
</UL>

<P><STRONG><a name="[8e]"></a>USBD_HID_EP_INT_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_EP_INT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_HID_EP_INT_Event &rArr; USBD_HID_EP_INTOUT_Event &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTOUT_Event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>USBD_HID_GetIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_GetIdle))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[123]"></a>USBD_HID_GetProtocol</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_GetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_GetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[120]"></a>USBD_HID_GetReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HID_GetReport &rArr; usbd_hid_get_report
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[12a]"></a>USBD_HID_SOF_Event</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, usbd_hid.o(i.USBD_HID_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_HID_SOF_Event &rArr; USBD_HID_EP_INTIN_Event &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOF_Event
</UL>

<P><STRONG><a name="[122]"></a>USBD_HID_SetIdle</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_SetIdle))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[124]"></a>USBD_HID_SetProtocol</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_SetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[11b]"></a>USBD_HID_SetReport</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_hid.o(i.USBD_HID_SetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_HID_SetReport &rArr; usbd_hid_set_report
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
</UL>

<P><STRONG><a name="[df]"></a>USBD_Handler</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, usbd_mk20d5.o(i.USBD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_Handler &rArr; USBD_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_core
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Suspend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Resume
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>USBD_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Init &rArr; USBD_IntrEna
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IntrEna
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[131]"></a>USBD_IntrEna</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.USBD_IntrEna))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IntrEna
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[289]"></a>USBD_RTX_TaskInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_config.o(i.USBD_RTX_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[e9]"></a>USBD_ReadEP</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, usbd_mk20d5.o(i.USBD_ReadEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_xor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_and
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKOUT_Event
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTOUT_Event
</UL>

<P><STRONG><a name="[137]"></a>USBD_ReqClrFeature_MSC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_config.o(i.USBD_ReqClrFeature_MSC))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[135]"></a>USBD_ReqGetDescriptor_HID</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, usbd_core_hid.o(i.USBD_ReqGetDescriptor_HID))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>

<P><STRONG><a name="[12c]"></a>USBD_Reset</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[104]"></a>USBD_ResetEP</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.USBD_ResetEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ResetEP &rArr; protected_or
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_or
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_and
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
</UL>

<P><STRONG><a name="[8a]"></a>USBD_Reset_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_config.o(i.USBD_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_Reset_Event &rArr; USBD_CDC_ACM_Reset_Event &rArr; USBD_CDC_ACM_Reset &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>USBD_Resume</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[8b]"></a>USBD_SOF_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_config.o(i.USBD_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SOF_Event &rArr; USBD_HID_SOF_Event &rArr; USBD_HID_EP_INTIN_Event &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SOF_Event
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>USBD_SetAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[115]"></a>USBD_SetStallEP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_SetStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[109]"></a>USBD_SetupStage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_SetupStage &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[10d]"></a>USBD_StatusInStage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_StatusInStage &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[118]"></a>USBD_StatusOutStage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_StatusOutStage &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[12e]"></a>USBD_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[136]"></a>USBD_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_WakeUpCfg))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[e5]"></a>USBD_WriteEP</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usbd_mk20d5.o(i.USBD_WriteEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>

<P><STRONG><a name="[13c]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[299]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[259]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_sn_display
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
</UL>

<P><STRONG><a name="[29a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[29b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[29c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[143]"></a>beep_prog_fail</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, beep.o(i.beep_prog_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = beep_prog_fail &rArr; beep_start
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_start
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>beep_prog_success</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, beep.o(i.beep_prog_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = beep_prog_success &rArr; beep_start
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_start
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>beep_scan</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, beep.o(i.beep_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_10ms_task
</UL>

<P><STRONG><a name="[144]"></a>beep_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, beep.o(i.beep_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beep_start
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_prog_success
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_prog_fail
</UL>

<P><STRONG><a name="[149]"></a>bsp_delay_ms</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, systick.o(i.bsp_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[246]"></a>bsp_init_systick</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, systick.o(i.bsp_init_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_init_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>cdc_process_event</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, usbd_user_cdc_acm.o(i.cdc_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cdc_process_event &rArr; uart_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_cdc_send_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataSend
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataRead
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataFree
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>check_sum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, es_common.o(i.check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_save_partition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_verify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex_end
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word_end
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_verify
</UL>

<P><STRONG><a name="[db]"></a>circ_buf_count_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, circ_buf.o(i.circ_buf_count_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>circ_buf_count_used</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_count_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_data
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>circ_buf_init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, circ_buf.o(i.circ_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear_buffers
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
</UL>

<P><STRONG><a name="[d9]"></a>circ_buf_pop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>circ_buf_push</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>circ_buf_read</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, circ_buf.o(i.circ_buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = circ_buf_read &rArr; circ_buf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_data
</UL>

<P><STRONG><a name="[155]"></a>circ_buf_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, circ_buf.o(i.circ_buf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_data
</UL>

<P><STRONG><a name="[158]"></a>clear_timing_info</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, settings_rom.o(i.clear_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = clear_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>cls_packet_write</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, usbd_user_cls_icd.o(i.cls_packet_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cls_packet_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
</UL>

<P><STRONG><a name="[19d]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[233]"></a>config_isp_verify_program</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_target_set.o(i.config_isp_verify_program))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_programe_config
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_program_flash
</UL>

<P><STRONG><a name="[159]"></a>config_rom_set</STRONG> (Thumb, 66 bytes, Stack size 96 bytes, settings_rom.o(i.config_rom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timing_info
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hr_timing_info
</UL>

<P><STRONG><a name="[260]"></a>config_spi_flash_verify_program</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, settings_spi_flash.o(i.config_spi_flash_verify_program))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
</UL>

<P><STRONG><a name="[166]"></a>dbg_C_step</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, es_debug.o(i.dbg_C_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dbg_C_step &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_run
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_handle
</UL>

<P><STRONG><a name="[16c]"></a>dbg_C_stepover</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, es_debug.o(i.dbg_C_stepover))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dbg_C_stepover &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step_over
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_handle
</UL>

<P><STRONG><a name="[16e]"></a>dbg_asm_step</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, es_debug.o(i.dbg_asm_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbg_asm_step &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[16f]"></a>dbg_asm_step_out</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, es_debug.o(i.dbg_asm_step_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbg_asm_step_out &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step_out
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_handle
</UL>

<P><STRONG><a name="[171]"></a>dbg_asm_step_over</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, es_debug.o(i.dbg_asm_step_over))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbg_asm_step_over &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step_over
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_handle
</UL>

<P><STRONG><a name="[172]"></a>dbg_clr_all_breakpointer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, es_debug.o(i.dbg_clr_all_breakpointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbg_clr_all_breakpointer &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[173]"></a>dbg_clr_breakpoint</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, es_debug.o(i.dbg_clr_breakpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dbg_clr_breakpoint &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[174]"></a>dbg_halt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, es_debug.o(i.dbg_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dbg_halt &rArr; icd_halt_check &rArr; icd_recv &rArr; icd_read_data_and_parity
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[176]"></a>dbg_import_ram_data</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, es_debug.o(i.dbg_import_ram_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dbg_import_ram_data &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[177]"></a>dbg_modify_PC</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, es_debug.o(i.dbg_modify_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dbg_modify_PC &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[179]"></a>dbg_modify_ram</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, es_debug.o(i.dbg_modify_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dbg_modify_ram &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[17a]"></a>dbg_read_all_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, es_debug.o(i.dbg_read_all_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dbg_read_all_stack &rArr; icd_read_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[17c]"></a>dbg_read_used_stack</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, es_debug.o(i.dbg_read_used_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dbg_read_used_stack &rArr; icd_read_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[17d]"></a>dbg_reset_target</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, es_debug.o(i.dbg_reset_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbg_reset_target &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_chip_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[17f]"></a>dbg_run</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, es_debug.o(i.dbg_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbg_run &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_run
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_handle
</UL>

<P><STRONG><a name="[180]"></a>dbg_set_breakpoint</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, es_debug.o(i.dbg_set_breakpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dbg_set_breakpoint &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[181]"></a>dbg_set_condition_breakpoint</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, es_debug.o(i.dbg_set_condition_breakpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dbg_set_condition_breakpoint &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[182]"></a>debug_process_command</STRONG> (Thumb, 1480 bytes, Stack size 16 bytes, es_debug.o(i.debug_process_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = debug_process_command &rArr; download_hr_chipinfo &rArr; set_hr_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_hr_chipinfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_config_word
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_read_ram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_reset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_icd_debug_handle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_chip_status
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_main_addr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hr_chipinfo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_userhex_end
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_userhex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_set_condition_breakpoint
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_set_breakpoint
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_reset_target
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_read_used_stack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_read_all_stack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_modify_ram
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_modify_PC
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_import_ram_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_halt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_clr_breakpoint
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_clr_all_breakpointer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack_DownloadNoStopLab
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eslink_process_command
</UL>

<P><STRONG><a name="[190]"></a>debug_process_handle</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, es_debug.o(i.debug_process_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = debug_process_handle &rArr; dbg_C_stepover &rArr; icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_run
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_over
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_out
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_stepover
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_step
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>delete_current_ofl_file</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, offline_file.o(i.delete_current_ofl_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = delete_current_ofl_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
</UL>

<P><STRONG><a name="[1a5]"></a>disk_initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_initialize &rArr; sf_read_info &rArr; sf_read_id &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e5]"></a>disk_ioctl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1a7]"></a>disk_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1f8]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1a9]"></a>disk_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[188]"></a>download_userhex</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, es_debug.o(i.download_userhex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = download_userhex
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[189]"></a>download_userhex_end</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, es_debug.o(i.download_userhex_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = download_userhex_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_SETUP
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[1c5]"></a>es_burner_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, es_burner.o(i.es_burner_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_burner_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_target_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_prog_set_intf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_SETUP
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>es_check_empty</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, es_burner.o(i.es_check_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = es_check_empty &rArr; int2array
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[178]"></a>es_delay_ms</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eslink.o(i.es_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_out_prog_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_in_prog_mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_reset_target
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_modify_PC
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_and_check
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_reset
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_id_check
</UL>

<P><STRONG><a name="[272]"></a>es_delay_us</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eslink.o(i.es_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_and_check
</UL>

<P><STRONG><a name="[267]"></a>es_erase_chip</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, es_burner.o(i.es_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_erase_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1c7]"></a>es_prog_set_intf</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, es_burner.o(i.es_prog_set_intf))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_burner_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_prg_intf
</UL>

<P><STRONG><a name="[268]"></a>es_program_encrypt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_burner.o(i.es_program_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = es_program_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1d4]"></a>es_program_flash</STRONG> (Thumb, 320 bytes, Stack size 1072 bytes, es_burner.o(i.es_program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = es_program_flash &rArr; online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_intercept_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1d6]"></a>es_program_verify</STRONG> (Thumb, 432 bytes, Stack size 1088 bytes, es_burner.o(i.es_program_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = es_program_verify &rArr; online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_intercept_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1d7]"></a>es_set_trget_power</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, gpio.o(i.es_set_trget_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = es_set_trget_power
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_init
</UL>

<P><STRONG><a name="[100]"></a>eslink_process_command</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbd_user_cls_icd.o(i.eslink_process_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = eslink_process_command &rArr; prog_process_command &rArr; download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
</UL>

<P><STRONG><a name="[1db]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_end
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_save_partition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
</UL>

<P><STRONG><a name="[1de]"></a>f_closedir</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
</UL>

<P><STRONG><a name="[1df]"></a>f_getfree</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[1e1]"></a>f_lseek</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_save_partition
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>

<P><STRONG><a name="[1e3]"></a>f_mkfs</STRONG> (Thumb, 1592 bytes, Stack size 112 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[1e7]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[1e8]"></a>f_open</STRONG> (Thumb, 360 bytes, Stack size 144 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_save_partition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
</UL>

<P><STRONG><a name="[1ed]"></a>f_opendir</STRONG> (Thumb, 114 bytes, Stack size 88 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
</UL>

<P><STRONG><a name="[1ee]"></a>f_read</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>

<P><STRONG><a name="[1ef]"></a>f_readdir</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
</UL>

<P><STRONG><a name="[1dc]"></a>f_sync</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[192]"></a>f_unlink</STRONG> (Thumb, 174 bytes, Stack size 160 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_delete
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_current_ofl_file
</UL>

<P><STRONG><a name="[1f2]"></a>f_write</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_save_partition
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
</UL>

<P><STRONG><a name="[162]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, unicode.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[15b]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[c7]"></a>flash_cache_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flash.o(i.flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[277]"></a>flash_send_byte</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, spi_flash.o(i.flash_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_cmp_data
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_id
</UL>

<P><STRONG><a name="[1fb]"></a>fm24cxx_check</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, eeprom.o(i.fm24cxx_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fm24cxx_check &rArr; i2c_check_device &rArr; i2c_waitack &rArr; i2c_timeout_cb &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_check_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_init
</UL>

<P><STRONG><a name="[1fe]"></a>fm24cxx_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eeprom.o(i.fm24cxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fm24cxx_init &rArr; fm24cxx_check &rArr; i2c_check_device &rArr; i2c_waitack &rArr; i2c_timeout_cb &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_check
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>fm24cxx_read</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, eeprom.o(i.fm24cxx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fm24cxx_read &rArr; i2c_waitack &rArr; i2c_timeout_cb &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_noack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_sn_display
</UL>

<P><STRONG><a name="[206]"></a>fm24cxx_write</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, eeprom.o(i.fm24cxx_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fm24cxx_write &rArr; i2c_waitack &rArr; i2c_timeout_cb &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog
</UL>

<P><STRONG><a name="[1f9]"></a>fmc_flash_cache_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_flash.o(i.fmc_flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_flash_cache_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[1fa]"></a>fmc_flash_prefetch_speculation_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_flash.o(i.fmc_flash_prefetch_speculation_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[195]"></a>get_all_ofl_file</STRONG> (Thumb, 76 bytes, Stack size 136 bytes, offline_file.o(i.get_all_ofl_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = get_all_ofl_file &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_end
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ofl_prj
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init
</UL>

<P><STRONG><a name="[208]"></a>get_chip_status</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.get_chip_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_chip_status &rArr; isp_rcv_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_mode_check
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_mode_set
</UL>

<P><STRONG><a name="[15f]"></a>get_fat</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1e6]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[273]"></a>get_hr_target_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings_rom.o(i.get_hr_target_info))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hr_chipinfo
</UL>

<P><STRONG><a name="[24a]"></a>get_link_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings_rom.o(i.get_link_mode))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[274]"></a>get_offlink_app_version</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, update.o(i.get_offlink_app_version))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_offline_version
</UL>

<P><STRONG><a name="[209]"></a>get_ofl_file_info</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, offline_file.o(i.get_ofl_file_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = get_ofl_file_info &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ofl_prj_info
</UL>

<P><STRONG><a name="[20a]"></a>get_ofl_file_name</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, offline_file.o(i.get_ofl_file_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ofl_file_name
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_menu
</UL>

<P><STRONG><a name="[20c]"></a>get_ofl_file_num</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, offline_file.o(i.get_ofl_file_num))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ofl_prj_num
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_menu
</UL>

<P><STRONG><a name="[20b]"></a>get_ofl_menu</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, link_menu.o(i.get_ofl_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ofl_menu &rArr; get_ofl_file_name
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_num
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_name
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
</UL>

<P><STRONG><a name="[20d]"></a>get_prog_status</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.get_prog_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_prog_status &rArr; isp_rcv_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_and_check
</UL>

<P><STRONG><a name="[1c6]"></a>get_target_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings_rom.o(i.get_target_info))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_burner_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog_init
</UL>

<P><STRONG><a name="[275]"></a>get_timing_info</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, settings_rom.o(i.get_timing_info))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_timinginfo
</UL>

<P><STRONG><a name="[20e]"></a>gpio_init</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>gpio_key0_down</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.gpio_key0_down))
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.Key_InitVar)
</UL>
<P><STRONG><a name="[254]"></a>gui_refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.gui_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_10ms_task
</UL>

<P><STRONG><a name="[214]"></a>iap_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iap_flash_intf.o(i.iap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iap_Init &rArr; FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
</UL>

<P><STRONG><a name="[15c]"></a>iap_erase_sector</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iap_flash_intf.o(i.iap_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iap_erase_sector &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>

<P><STRONG><a name="[15d]"></a>iap_flash_program</STRONG> (Thumb, 124 bytes, Stack size 1064 bytes, iap_flash_intf.o(i.iap_flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>

<P><STRONG><a name="[17e]"></a>icd_chip_reset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_chip_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icd_chip_reset &rArr; icd_control &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_reset_target
</UL>

<P><STRONG><a name="[215]"></a>icd_control</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icd_control &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_inst
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_wait_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_stop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_start
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step_over
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step_out
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_step
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_run
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_chip_reset
</UL>

<P><STRONG><a name="[175]"></a>icd_halt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icd_halt &rArr; icd_control &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_halt
</UL>

<P><STRONG><a name="[168]"></a>icd_halt_check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_halt_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icd_halt_check &rArr; icd_recv &rArr; icd_read_data_and_parity
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_handle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_run
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_reset_target
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_halt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_over
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_out
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_stepover
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_step
</UL>

<P><STRONG><a name="[21c]"></a>icd_read_data_and_parity</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_read_data_and_parity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icd_read_data_and_parity
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_recv
</UL>

<P><STRONG><a name="[169]"></a>icd_read_str</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hr7p169b_icd.o(i.icd_read_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icd_read_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_send
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_read_ram
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_chip_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_read_used_stack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_read_all_stack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_modify_ram
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_import_ram_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_stepover
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_step
</UL>

<P><STRONG><a name="[21a]"></a>icd_recv</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icd_recv &rArr; icd_read_data_and_parity
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_inst
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_data_and_parity
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_wait_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_stop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_start
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_halt_check
</UL>

<P><STRONG><a name="[16a]"></a>icd_run</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icd_run &rArr; icd_control &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_run
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_step
</UL>

<P><STRONG><a name="[21b]"></a>icd_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_inst
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_data_and_parity
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_wait_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_stop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_start
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_write_str
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
</UL>

<P><STRONG><a name="[16b]"></a>icd_step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icd_step &rArr; icd_control &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_step
</UL>

<P><STRONG><a name="[170]"></a>icd_step_out</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_step_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icd_step_out &rArr; icd_control &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_out
</UL>

<P><STRONG><a name="[16d]"></a>icd_step_over</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hr7p169b_icd.o(i.icd_step_over))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icd_step_over &rArr; icd_control &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_over
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_stepover
</UL>

<P><STRONG><a name="[21d]"></a>icd_write_data_and_parity</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, hr7p169b_icd.o(i.icd_write_data_and_parity))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icd_write_data_and_parity
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_send
</UL>

<P><STRONG><a name="[217]"></a>icd_write_inst</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hr7p169b_icd.o(i.icd_write_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icd_write_inst
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_send
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_recv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>

<P><STRONG><a name="[167]"></a>icd_write_str</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, hr7p169b_icd.o(i.icd_write_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icd_write_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_set_condition_breakpoint
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_set_breakpoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_run
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_reset_target
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_modify_ram
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_modify_PC
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_import_ram_data
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_clr_breakpoint
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_clr_all_breakpointer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_over
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step_out
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_asm_step
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_stepover
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_C_step
</UL>

<P><STRONG><a name="[21f]"></a>id_check</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.id_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = id_check &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_writeb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_start_bit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_readb
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_end_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_id_check
</UL>

<P><STRONG><a name="[224]"></a>info_rom_set</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, settings_rom.o(i.info_rom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = info_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_link_mode
</UL>

<P><STRONG><a name="[226]"></a>isp_entry_isp_mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.isp_entry_isp_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isp_entry_isp_mode &rArr; isp_unlock &rArr; unlock_chip &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_unlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_reset
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_mode_set
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_id_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_init
</UL>

<P><STRONG><a name="[22b]"></a>isp_erase_chip</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.isp_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = isp_erase_chip &rArr; erase_and_check &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_and_check
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_erase_chip
</UL>

<P><STRONG><a name="[228]"></a>isp_id_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.isp_id_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isp_id_check &rArr; id_check &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_start_bit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_check
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_entry_isp_mode
</UL>

<P><STRONG><a name="[22c]"></a>isp_mode_check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.isp_mode_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isp_mode_check &rArr; get_chip_status &rArr; isp_rcv_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_init
</UL>

<P><STRONG><a name="[22a]"></a>isp_mode_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.isp_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isp_mode_set &rArr; get_chip_status &rArr; isp_rcv_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_status
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_entry_isp_mode
</UL>

<P><STRONG><a name="[22e]"></a>isp_out_isp_mode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.isp_out_isp_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isp_out_isp_mode &rArr; isp_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_uninit
</UL>

<P><STRONG><a name="[232]"></a>isp_program_code</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, hr7p169b_isp.o(i.isp_program_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = isp_program_code &rArr; program_data &rArr; program_and_check &rArr; prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_data
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_program_flash
</UL>

<P><STRONG><a name="[230]"></a>isp_program_config</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, hr7p169b_isp.o(i.isp_program_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = isp_program_config &rArr; program_data &rArr; program_and_check &rArr; prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_data
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_programe_config
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_encrypt_chip
</UL>

<P><STRONG><a name="[1c4]"></a>isp_rcv_bytes</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hr7p169b_isp.o(i.isp_rcv_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isp_rcv_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_writeb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_start_bit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_readb
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_end_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_and_check
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_mode_check
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prog_status
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_status
</UL>

<P><STRONG><a name="[22f]"></a>isp_read_code</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.isp_read_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = isp_read_code &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_verify_flash
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_read_flash
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_program_flash
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_check_empty
</UL>

<P><STRONG><a name="[225]"></a>isp_read_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.isp_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = isp_read_config &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_verify_config
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_read_config
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_read_chipid
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_read_chip_chksum
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_programe_config
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_check_empty
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_chipid_check
</UL>

<P><STRONG><a name="[227]"></a>isp_reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.isp_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isp_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_start_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_out_isp_mode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_entry_isp_mode
</UL>

<P><STRONG><a name="[141]"></a>isp_send_bytes</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hr7p169b_isp.o(i.isp_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_writeb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_start_bit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_end_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_and_check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_write_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;area_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_set
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_mode_set
</UL>

<P><STRONG><a name="[231]"></a>isp_set_target_reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, isp_prog_intf.o(i.isp_set_target_reset))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_prog_init
</UL>

<P><STRONG><a name="[229]"></a>isp_unlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.isp_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isp_unlock &rArr; unlock_chip &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_chip
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_status
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_entry_isp_mode
</UL>

<P><STRONG><a name="[237]"></a>key_clear_buffers</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(i.key_clear_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[238]"></a>key_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = key_init &rArr; key_clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear_buffers
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_InitVar
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23a]"></a>key_read_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key.o(i.key_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = key_read_data &rArr; circ_buf_read &rArr; circ_buf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>key_scan</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = key_scan &rArr; bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_detect_key
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_10ms_task
</UL>

<P><STRONG><a name="[14c]"></a>key_write_data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, key.o(i.key_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_detect_key
</UL>

<P><STRONG><a name="[1]"></a>logo_display</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, link_menu.o(i.logo_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = logo_display &rArr; set_app_update &rArr; info_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_data
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSoftReset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> link_menu.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>main</STRONG> (Thumb, 674 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = main &rArr; clear_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_burner_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configured
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_out_prog_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_in_prog_mode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read_data
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_link_mode
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_set_trget_power
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timing_info
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_systick
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_prog_success
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_prog_fail
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d6]"></a>main_10ms_task</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.main_10ms_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main_10ms_task &rArr; key_scan &rArr; bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_scan
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ef]"></a>main_cdc_send_event</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.main_cdc_send_event))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortInitialize
</UL>

<P><STRONG><a name="[18f]"></a>main_icd_debug_handle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.main_icd_debug_handle))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[186]"></a>main_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.main_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[250]"></a>menu_display</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, link_menu.o(i.menu_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_display
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[247]"></a>menu_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, link_menu.o(i.menu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = menu_init &rArr; get_ofl_menu &rArr; get_ofl_file_name
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_link_mode
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22d]"></a>mode_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mode_set &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_writeb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_start_bit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_end_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_mode_set
</UL>

<P><STRONG><a name="[245]"></a>msg_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, message.o(i.msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = msg_init &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23e]"></a>msg_read_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, message.o(i.msg_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msg_read_data &rArr; circ_buf_read &rArr; circ_buf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[24d]"></a>msg_write_data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, message.o(i.msg_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msg_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>ofl_file_add_partition</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, offline_file.o(i.ofl_file_add_partition))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_serial_num
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_info
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_info
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
</UL>

<P><STRONG><a name="[194]"></a>ofl_file_delete</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, offline_file.o(i.ofl_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ofl_file_delete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ofl_prj
</UL>

<P><STRONG><a name="[244]"></a>ofl_file_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ofl_file_init &rArr; get_all_ofl_file &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>ofl_file_init_partition</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_init_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ofl_file_init_partition &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_end
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_info
</UL>

<P><STRONG><a name="[1bc]"></a>ofl_file_open</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, offline_file.o(i.ofl_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ofl_file_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_info
</UL>

<P><STRONG><a name="[1b3]"></a>ofl_file_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, offline_file.o(i.ofl_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ofl_file_read &rArr; file_read &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_info
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
</UL>

<P><STRONG><a name="[1b4]"></a>ofl_file_read_end</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_read_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ofl_file_read_end &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_info
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
</UL>

<P><STRONG><a name="[1b2]"></a>ofl_file_read_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_read_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_info
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
</UL>

<P><STRONG><a name="[1b8]"></a>ofl_file_save_partition</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, offline_file.o(i.ofl_file_save_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ofl_file_save_partition &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_end
</UL>

<P><STRONG><a name="[1af]"></a>ofl_file_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, offline_file.o(i.ofl_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ofl_file_write &rArr; file_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init_partition
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_serial_num
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_info
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_info
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config
</UL>

<P><STRONG><a name="[1b1]"></a>ofl_file_write_end</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_write_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ofl_file_write_end &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init_partition
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
</UL>

<P><STRONG><a name="[1b6]"></a>ofl_file_write_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_write_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init_partition
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_info
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
</UL>

<P><STRONG><a name="[24c]"></a>ofl_in_prog_mode</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, offline_app.o(i.ofl_in_prog_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ofl_in_prog_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_start_in_low
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24f]"></a>ofl_out_prog_mode</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, offline_app.o(i.ofl_out_prog_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ofl_out_prog_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_start_in_low
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>ofl_prog</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, offline_app.o(i.ofl_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = ofl_prog &rArr; ofl_program_verify &rArr; online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_verify
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24b]"></a>ofl_prog_init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, offline_app.o(i.ofl_prog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ofl_prog_init &rArr; online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_target_info
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_SETUP
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>ofl_program_display</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, link_menu.o(i.ofl_program_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = ofl_program_display &rArr; set_link_mode &rArr; info_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_link_mode
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_sn_display
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSoftReset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> link_menu.o(.data)
</UL>
<P><STRONG><a name="[25a]"></a>ofl_sn_display</STRONG> (Thumb, 216 bytes, Stack size 112 bytes, link_menu.o(i.ofl_sn_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ofl_sn_display &rArr; oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
</UL>

<P><STRONG><a name="[255]"></a>ofl_start_in_low</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.ofl_start_in_low))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_out_prog_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_in_prog_mode
</UL>

<P><STRONG><a name="[23c]"></a>oled_clr_scr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, oled.o(i.oled_clr_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oled_clr_scr &rArr; OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[23d]"></a>oled_display_str</STRONG> (Thumb, 338 bytes, Stack size 160 bytes, oled.o(i.oled_display_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_StartDraw
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_EndDraw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_sn_display
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[242]"></a>oled_init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, oled.o(i.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oled_init &rArr; oled_clr_scr &rArr; OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_delay_ms
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>online_file_erase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, settings_spi_flash.o(i.online_file_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = online_file_erase &rArr; sf_erase_sector &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex_end
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word_end
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word
</UL>

<P><STRONG><a name="[1cf]"></a>online_file_read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, settings_spi_flash.o(i.online_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_verify
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_flash
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_config_word
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex_end
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word_end
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_verify
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_flash
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
</UL>

<P><STRONG><a name="[1cd]"></a>online_file_write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, settings_spi_flash.o(i.online_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = online_file_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_cmp_data
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_spi_flash_verify_program
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex_end
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word_end
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word
</UL>

<P><STRONG><a name="[262]"></a>prog_mode_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.prog_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_and_check
</UL>

<P><STRONG><a name="[1da]"></a>prog_process_command</STRONG> (Thumb, 1474 bytes, Stack size 24 bytes, es_burner.o(i.prog_process_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = prog_process_command &rArr; download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_reset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_verify
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_flash
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_encrypt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_erase_chip
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_check_empty
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_download
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_timinginfo
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ofl_prj_num
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ofl_prj_info
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_offline_version
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_read_flash
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_read_config_word
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_read_chipid
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_read_chip_chksum
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_config_word
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_prog_get_intf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_prg_intf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex_end
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_hex
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word_end
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_download_config_word
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_serial_num
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_info
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing_end
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_timing
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_info
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex_end
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_hex
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_end
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config_end
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_ofl_prj_config
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ofl_prj
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eslink_process_command
</UL>

<P><STRONG><a name="[160]"></a>put_fat</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[184]"></a>read_hr_chipinfo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, es_debug.o(i.read_hr_chipinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_hr_chipinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_target_info
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[d0]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1d5]"></a>serial_number_intercept_write</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, eslink.o(i.serial_number_intercept_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_number_intercept_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_verify
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_flash
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_verify
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_flash
</UL>

<P><STRONG><a name="[1ad]"></a>set_app_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, settings_rom.o(i.set_app_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = set_app_update &rArr; info_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_hr_chipinfo
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[1ac]"></a>set_hr_timing_info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, settings_rom.o(i.set_hr_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = set_hr_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_hr_chipinfo
</UL>

<P><STRONG><a name="[25b]"></a>set_link_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, settings_rom.o(i.set_link_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = set_link_mode &rArr; info_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
</UL>

<P><STRONG><a name="[18c]"></a>set_main_addr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, es_debug.o(i.set_main_addr))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[241]"></a>settings_rom_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, settings_rom.o(i.settings_rom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = settings_rom_init &rArr; iap_Init &rArr; FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>sf_cmp_data</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, spi_flash.o(i.sf_cmp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_cmp_data &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
</UL>

<P><STRONG><a name="[1f5]"></a>sf_erase_chip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_flash.o(i.sf_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_erase_chip &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[1aa]"></a>sf_erase_sector</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, spi_flash.o(i.sf_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sf_erase_sector &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_erase
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[27b]"></a>sf_page_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, spi_flash.o(i.sf_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write
</UL>

<P><STRONG><a name="[1a6]"></a>sf_read_info</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, spi_flash.o(i.sf_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sf_read_info &rArr; sf_read_id &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[280]"></a>spi_falsh_hw_init</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, spi_flash.o(i.spi_falsh_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = spi_falsh_hw_init &rArr; DSPI_MasterInit &rArr; DSPI_MasterSetDelayTimes &rArr; DSPI_MasterSetDelayScaler
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[243]"></a>spi_flash_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_flash.o(i.spi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spi_flash_init &rArr; spi_falsh_hw_init &rArr; DSPI_MasterInit &rArr; DSPI_MasterSetDelayTimes &rArr; DSPI_MasterSetDelayScaler
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_falsh_hw_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>spi_flash_read</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi_flash.o(i.spi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1ab]"></a>spi_flash_write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, spi_flash.o(i.spi_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[ee]"></a>uart_initialize</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, uart.o(i.uart_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uart_initialize &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortInitialize
</UL>

<P><STRONG><a name="[14f]"></a>uart_read_data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart.o(i.uart_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_read_data &rArr; circ_buf_read &rArr; circ_buf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[f1]"></a>uart_reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(i.uart_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uart_reset &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortReset
</UL>

<P><STRONG><a name="[f3]"></a>uart_set_configuration</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, uart.o(i.uart_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_set_configuration &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
</UL>

<P><STRONG><a name="[151]"></a>uart_write_data</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uart.o(i.uart_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[150]"></a>uart_write_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_write_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_write_free &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[236]"></a>unlock_chip</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, hr7p169b_isp.o(i.unlock_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = unlock_chip &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_writeb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_start_bit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_end_bit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_unlock
</UL>

<P><STRONG><a name="[18d]"></a>update_chip_status</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, es_debug.o(i.update_chip_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = update_chip_status &rArr; icd_read_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[285]"></a>usbd_class_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_config.o(i.usbd_class_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_class_init &rArr; USBD_CDC_ACM_Initialize &rArr; USBD_CDC_ACM_PortInitialize &rArr; uart_initialize &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[253]"></a>usbd_configured</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_configured))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[252]"></a>usbd_connect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>usbd_hid_get_protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_get_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetProtocol
</UL>

<P><STRONG><a name="[126]"></a>usbd_hid_get_report</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_hid.o(i.usbd_hid_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_hid_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReport
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>

<P><STRONG><a name="[286]"></a>usbd_hid_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_init))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[12b]"></a>usbd_hid_set_protocol</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_set_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetProtocol
</UL>

<P><STRONG><a name="[128]"></a>usbd_hid_set_report</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, usbd_hid.o(i.usbd_hid_set_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_hid_set_report
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetReport
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTOUT_Event
</UL>

<P><STRONG><a name="[251]"></a>usbd_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_init &rArr; usbd_class_init &rArr; USBD_CDC_ACM_Initialize &rArr; USBD_CDC_ACM_PortInitialize &rArr; uart_initialize &rArr; clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RTX_TaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>usbd_reset_core</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_reset_core))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fe]"></a>get_cmd_data_len</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usbd_user_cls_icd.o(i.get_cmd_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_cmd_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
</UL>

<P><STRONG><a name="[263]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_burner.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[270]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_burner.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1c8]"></a>ISP_SETUP</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, es_burner.o(i.ISP_SETUP))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_burner_init
</UL>

<P><STRONG><a name="[193]"></a>delete_ofl_prj</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, es_burner.o(i.delete_ofl_prj))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = delete_ofl_prj &rArr; get_all_ofl_file &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_delete
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1ae]"></a>download_ofl_prj_config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, es_burner.o(i.download_ofl_prj_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = download_ofl_prj_config &rArr; ofl_file_write &rArr; file_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1b0]"></a>download_ofl_prj_config_end</STRONG> (Thumb, 212 bytes, Stack size 1056 bytes, es_burner.o(i.download_ofl_prj_config_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = download_ofl_prj_config_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_end
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_add_partition
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_current_ofl_file
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1b7]"></a>download_ofl_prj_end</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, es_burner.o(i.download_ofl_prj_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = download_ofl_prj_end &rArr; get_all_ofl_file &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_end
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_save_partition
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1b9]"></a>download_ofl_prj_hex</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, es_burner.o(i.download_ofl_prj_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = download_ofl_prj_hex &rArr; ofl_file_write &rArr; file_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1ba]"></a>download_ofl_prj_hex_end</STRONG> (Thumb, 214 bytes, Stack size 1056 bytes, es_burner.o(i.download_ofl_prj_hex_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = download_ofl_prj_hex_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_end
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_add_partition
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_current_ofl_file
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1bb]"></a>download_ofl_prj_info</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, es_burner.o(i.download_ofl_prj_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = download_ofl_prj_info &rArr; ofl_file_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_start
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init_partition
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_add_partition
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1be]"></a>download_ofl_prj_timing</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, es_burner.o(i.download_ofl_prj_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = download_ofl_prj_timing &rArr; ofl_file_write &rArr; file_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1bf]"></a>download_ofl_prj_timing_end</STRONG> (Thumb, 210 bytes, Stack size 1056 bytes, es_burner.o(i.download_ofl_prj_timing_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = download_ofl_prj_timing_end &rArr; ofl_file_write_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write_end
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_add_partition
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_current_ofl_file
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1c0]"></a>download_ofl_prj_timing_info</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, es_burner.o(i.download_ofl_prj_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = download_ofl_prj_timing_info &rArr; ofl_file_write &rArr; file_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_add_partition
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1c1]"></a>download_ofl_serial_num</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, es_burner.o(i.download_ofl_serial_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = download_ofl_serial_num &rArr; ofl_file_write &rArr; file_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_add_partition
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1cb]"></a>es_download_config_word</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, es_burner.o(i.es_download_config_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = es_download_config_word &rArr; online_file_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1ce]"></a>es_download_config_word_end</STRONG> (Thumb, 170 bytes, Stack size 1056 bytes, es_burner.o(i.es_download_config_word_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = es_download_config_word_end &rArr; online_file_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_erase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1d0]"></a>es_download_hex</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, es_burner.o(i.es_download_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = es_download_hex &rArr; online_file_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1d1]"></a>es_download_hex_end</STRONG> (Thumb, 172 bytes, Stack size 1056 bytes, es_burner.o(i.es_download_hex_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = es_download_hex_end &rArr; online_file_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_erase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1d2]"></a>es_download_prg_intf</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, es_burner.o(i.es_download_prg_intf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = es_download_prg_intf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_prog_set_intf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[266]"></a>es_prog_get_intf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, es_burner.o(i.es_prog_get_intf))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1d3]"></a>es_program_config_word</STRONG> (Thumb, 166 bytes, Stack size 1056 bytes, es_burner.o(i.es_program_config_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = es_program_config_word &rArr; online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[26b]"></a>es_read_chip_chksum</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, es_burner.o(i.es_read_chip_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_read_chip_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[26c]"></a>es_read_chipid</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, es_burner.o(i.es_read_chipid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_read_chipid
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[269]"></a>es_read_config_word</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, es_burner.o(i.es_read_config_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = es_read_config_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[26a]"></a>es_read_flash</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, es_burner.o(i.es_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = es_read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[1ca]"></a>int2array</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, es_burner.o(i.int2array))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_verify
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_flash
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_check_empty
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_offline_version
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_program_config_word
</UL>

<P><STRONG><a name="[264]"></a>read_offline_version</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, es_burner.o(i.read_offline_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_offline_version &rArr; int2array
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offlink_app_version
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[26f]"></a>read_ofl_prj_info</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, es_burner.o(i.read_ofl_prj_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = read_ofl_prj_info &rArr; get_ofl_file_info &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[26e]"></a>read_ofl_prj_num</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, es_burner.o(i.read_ofl_prj_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_ofl_prj_num
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[265]"></a>read_timinginfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, es_burner.o(i.read_timinginfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_timinginfo
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timing_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[26d]"></a>serial_number_download</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, es_burner.o(i.serial_number_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_number_download
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[183]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_debug.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[18a]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_debug.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[1c2]"></a>ISP_SETUP</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, es_debug.o(i.ISP_SETUP))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_userhex_end
</UL>

<P><STRONG><a name="[17b]"></a>dbg_read_ram</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, es_debug.o(i.dbg_read_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dbg_read_ram &rArr; icd_read_str &rArr; icd_send &rArr; icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_read_str
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[187]"></a>download_config_word</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, es_debug.o(i.download_config_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = download_config_word
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[185]"></a>download_hr_chipinfo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, es_debug.o(i.download_hr_chipinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = download_hr_chipinfo &rArr; set_hr_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hr_timing_info
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[249]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[248]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>GPIO_PinWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[1d9]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_set_trget_power
</UL>

<P><STRONG><a name="[1d8]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_set_trget_power
</UL>

<P><STRONG><a name="[a1]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[a2]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin_mux.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[87]"></a>CLOCK_CONFIG_FllStableDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_config.o(i.CLOCK_CONFIG_FllStableDelay))
<BR>[Address Reference Count : 1]<UL><LI> clock_config.o(i.BOARD_BootClockRUN)
</UL>
<P><STRONG><a name="[27f]"></a>GPIO_PinWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eeprom.o(i.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_init
</UL>

<P><STRONG><a name="[212]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_noack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ack
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[211]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_noack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ack
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[27e]"></a>PORT_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eeprom.o(i.PORT_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_init
</UL>

<P><STRONG><a name="[1fc]"></a>i2c_check_device</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, eeprom.o(i.i2c_check_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_check_device &rArr; i2c_waitack &rArr; i2c_timeout_cb &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_check
</UL>

<P><STRONG><a name="[207]"></a>i2c_delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eeprom.o(i.i2c_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_noack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ack
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[210]"></a>i2c_read</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, eeprom.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_noack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ack
</UL>

<P><STRONG><a name="[204]"></a>i2c_read_ack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, eeprom.o(i.i2c_read_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_read_ack &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
</UL>

<P><STRONG><a name="[205]"></a>i2c_read_noack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eeprom.o(i.i2c_read_noack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_read_noack &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
</UL>

<P><STRONG><a name="[201]"></a>i2c_start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, eeprom.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_start
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_check_device
</UL>

<P><STRONG><a name="[1fd]"></a>i2c_stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, eeprom.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_check
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_timeout_cb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_check_device
</UL>

<P><STRONG><a name="[213]"></a>i2c_timeout_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeprom.o(i.i2c_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_timeout_cb &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
</UL>

<P><STRONG><a name="[203]"></a>i2c_waitack</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, eeprom.o(i.i2c_waitack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_waitack &rArr; i2c_timeout_cb &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_timeout_cb
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_check_device
</UL>

<P><STRONG><a name="[202]"></a>i2c_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eeprom.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_check_device
</UL>

<P><STRONG><a name="[1ff]"></a>soft_i2c_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, eeprom.o(i.soft_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soft_i2c_init &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm24cxx_init
</UL>

<P><STRONG><a name="[239]"></a>Key_InitVar</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, key.o(i.Key_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[14b]"></a>bsp_detect_key</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, key.o(i.bsp_detect_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[27c]"></a>sf_read_id</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, spi_flash.o(i.sf_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_read_id &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_info
</UL>

<P><STRONG><a name="[276]"></a>sf_set_cs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi_flash.o(i.sf_set_cs))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_cmp_data
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_id
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[279]"></a>sf_wait_busy</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi_flash.o(i.sf_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay_ms
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[27a]"></a>sf_write_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(i.sf_write_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_write_disable &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[278]"></a>sf_write_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(i.sf_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_write_enable &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
</UL>

<P><STRONG><a name="[27d]"></a>spi_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi_flash.o(i.spi_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
</UL>

<P><STRONG><a name="[282]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[281]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[283]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[156]"></a>clear_buffers</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(i.clear_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[14a]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
</UL>

<P><STRONG><a name="[147]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, beep.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_scan
</UL>

<P><STRONG><a name="[148]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, beep.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_scan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_start
</UL>

<P><STRONG><a name="[1f3]"></a>file_find</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, offline_file.o(i.file_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = file_find &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
</UL>

<P><STRONG><a name="[1f4]"></a>file_mount</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, offline_file.o(i.file_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = file_mount &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init
</UL>

<P><STRONG><a name="[1f6]"></a>file_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, offline_file.o(i.file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = file_read &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
</UL>

<P><STRONG><a name="[1f7]"></a>file_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, offline_file.o(i.file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = file_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_write
</UL>

<P><STRONG><a name="[258]"></a>ISP_SETUP</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, offline_app.o(i.ISP_SETUP))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog_init
</UL>

<P><STRONG><a name="[256]"></a>ofl_program_flash</STRONG> (Thumb, 270 bytes, Stack size 1072 bytes, offline_app.o(i.ofl_program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = ofl_program_flash &rArr; online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_intercept_write
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog
</UL>

<P><STRONG><a name="[257]"></a>ofl_program_verify</STRONG> (Thumb, 354 bytes, Stack size 1080 bytes, offline_app.o(i.ofl_program_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = ofl_program_verify &rArr; online_file_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_read
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_intercept_write
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prog
</UL>

<P><STRONG><a name="[8]"></a>isp_chipid_check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isp_prog_intf.o(i.isp_chipid_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = isp_chipid_check &rArr; isp_read_config &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>isp_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_prog_intf.o(i.isp_init))
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>isp_prog_check_empty</STRONG> (Thumb, 224 bytes, Stack size 1064 bytes, isp_prog_intf.o(i.isp_prog_check_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = isp_prog_check_empty &rArr; isp_read_config &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>isp_prog_encrypt_chip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isp_prog_intf.o(i.isp_prog_encrypt_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = isp_prog_encrypt_chip &rArr; isp_program_config &rArr; program_data &rArr; program_and_check &rArr; prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_program_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>isp_prog_erase_chip</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, isp_prog_intf.o(i.isp_prog_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = isp_prog_erase_chip &rArr; isp_erase_chip &rArr; erase_and_check &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_erase_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>isp_prog_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, isp_prog_intf.o(i.isp_prog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = isp_prog_init &rArr; isp_entry_isp_mode &rArr; isp_unlock &rArr; unlock_chip &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_set_trget_power
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_mode_check
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_entry_isp_mode
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_set_target_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>isp_prog_program_flash</STRONG> (Thumb, 170 bytes, Stack size 1064 bytes, isp_prog_intf.o(i.isp_prog_program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = isp_prog_program_flash &rArr; isp_program_code &rArr; program_data &rArr; program_and_check &rArr; prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_code
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_program_code
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_isp_verify_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>isp_prog_programe_config</STRONG> (Thumb, 162 bytes, Stack size 168 bytes, isp_prog_intf.o(i.isp_prog_programe_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = isp_prog_programe_config &rArr; isp_program_config &rArr; program_data &rArr; program_and_check &rArr; prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_program_config
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_isp_verify_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>isp_prog_read_chip_chksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, isp_prog_intf.o(i.isp_prog_read_chip_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = isp_prog_read_chip_chksum &rArr; isp_read_config &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>isp_prog_read_chipid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isp_prog_intf.o(i.isp_prog_read_chipid))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = isp_prog_read_chipid &rArr; isp_read_config &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>isp_prog_read_config</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, isp_prog_intf.o(i.isp_prog_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = isp_prog_read_config &rArr; isp_read_config &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>isp_prog_read_flash</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, isp_prog_intf.o(i.isp_prog_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = isp_prog_read_flash &rArr; isp_read_code &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>isp_prog_uninit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isp_prog_intf.o(i.isp_prog_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isp_prog_uninit &rArr; isp_out_isp_mode &rArr; isp_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_out_isp_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>isp_prog_verify_config</STRONG> (Thumb, 158 bytes, Stack size 1064 bytes, isp_prog_intf.o(i.isp_prog_verify_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = isp_prog_verify_config &rArr; isp_read_config &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>isp_prog_verify_flash</STRONG> (Thumb, 158 bytes, Stack size 1064 bytes, isp_prog_intf.o(i.isp_prog_verify_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = isp_prog_verify_flash &rArr; isp_read_code &rArr; read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_prog_intf.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>addr_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_data
</UL>

<P><STRONG><a name="[142]"></a>area_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = area_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_code
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_program_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_program_code
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_erase_chip
</UL>

<P><STRONG><a name="[165]"></a>data_write_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hr7p169b_isp.o(i.data_write_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = data_write_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_data
</UL>

<P><STRONG><a name="[1c3]"></a>erase_and_check</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, hr7p169b_isp.o(i.erase_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = erase_and_check &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_ms
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_erase_chip
</UL>

<P><STRONG><a name="[223]"></a>isp_end_bit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, hr7p169b_isp.o(i.isp_end_bit))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_chip
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_check
</UL>

<P><STRONG><a name="[222]"></a>isp_readb</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.isp_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isp_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_check
</UL>

<P><STRONG><a name="[220]"></a>isp_start_bit</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, hr7p169b_isp.o(i.isp_start_bit))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_chip
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_reset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_id_check
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_check
</UL>

<P><STRONG><a name="[221]"></a>isp_writeb</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hr7p169b_isp.o(i.isp_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isp_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_chip
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_send_bytes
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_check
</UL>

<P><STRONG><a name="[271]"></a>program_and_check</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hr7p169b_isp.o(i.program_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = program_and_check &rArr; prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_delay_us
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_mode_set
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prog_status
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_data
</UL>

<P><STRONG><a name="[234]"></a>program_data</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hr7p169b_isp.o(i.program_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = program_data &rArr; program_and_check &rArr; prog_mode_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_and_check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_write_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_program_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_program_code
</UL>

<P><STRONG><a name="[235]"></a>read_data</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, hr7p169b_isp.o(i.read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_data &rArr; addr_set &rArr; isp_send_bytes &rArr; isp_writeb
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_rcv_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_read_code
</UL>

<P><STRONG><a name="[216]"></a>icd_start</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, hr7p169b_icd.o(i.icd_start))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_send
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_recv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>

<P><STRONG><a name="[219]"></a>icd_stop</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, hr7p169b_icd.o(i.icd_stop))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_send
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_recv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_timeout_cb
</UL>

<P><STRONG><a name="[21e]"></a>icd_timeout_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hr7p169b_icd.o(i.icd_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_wait_ack
</UL>

<P><STRONG><a name="[218]"></a>icd_wait_ack</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, hr7p169b_icd.o(i.icd_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icd_wait_ack &rArr; icd_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_timeout_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_send
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_recv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icd_control
</UL>

<P><STRONG><a name="[25f]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>

<P><STRONG><a name="[25d]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>

<P><STRONG><a name="[d1]"></a>OLED_BufToPanel</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oled.o(i.OLED_BufToPanel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_EndDraw
</UL>

<P><STRONG><a name="[25e]"></a>oled_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oled.o(i.oled_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[d2]"></a>oled_write_cmd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, oled.o(i.oled_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oled_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
</UL>

<P><STRONG><a name="[d3]"></a>oled_write_data</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, oled.o(i.oled_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
</UL>

<P><STRONG><a name="[23f]"></a>SystemSoftReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, link_menu.o(i.SystemSoftReset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_program_display
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[aa]"></a>CLOCK_GetFllExtRefClkFreq</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_GetFllExtRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>

<P><STRONG><a name="[a8]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[b1]"></a>CLOCK_GetInternalRefClkSelectFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkSelectFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
</UL>

<P><STRONG><a name="[ab]"></a>CLOCK_GetMcgExtClkFreq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetMcgExtClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>

<P><STRONG><a name="[b2]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[b7]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_dspi.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[b3]"></a>DSPI_CommonIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_dspi.o(i.DSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>DSPI_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[b4]"></a>DSPI_IsMaster</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_IsMaster))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterSetDelayTimes
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterSetDelayScaler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterSetBaudRate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>DSPI_SetMasterSlaveMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_SetMasterSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[bb]"></a>DSPI_SetOnePcsPolarity</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_dspi.o(i.DSPI_SetOnePcsPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSPI_SetOnePcsPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[bf]"></a>DSPI_StartTransfer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_StartTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[b9]"></a>DSPI_StopTransfer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_StopTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterInit
</UL>

<P><STRONG><a name="[cc]"></a>copy_flash_common_bit_operation</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_flash.o(i.copy_flash_common_bit_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[cb]"></a>copy_flash_run_command</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_flash.o(i.copy_flash_run_command))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[c5]"></a>flash_cache_clear_process</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_cache_clear_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flash_prefetch_speculation_clear
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flash_cache_clear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
</UL>

<P><STRONG><a name="[c9]"></a>flash_check_execute_in_ram_function_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_execute_in_ram_function_info))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[c3]"></a>flash_check_range</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, fsl_flash.o(i.flash_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[c4]"></a>flash_check_user_key</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_user_key))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[c6]"></a>flash_command_sequence</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_command_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[c2]"></a>flash_get_matched_operation_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_get_matched_operation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[152]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[163]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1e2]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[15a]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[15e]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[161]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[196]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[199]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[198]"></a>dir_next</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[19e]"></a>dir_read</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[1a0]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1a4]"></a>dir_remove</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[197]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1e0]"></a>find_volume</STRONG> (Thumb, 886 bytes, Stack size 80 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[1a3]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e9]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1a2]"></a>gen_numname</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1f0]"></a>get_fileinfo</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[1e4]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ea]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[19b]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1a1]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[164]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[153]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[19f]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[1ec]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1eb]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[19a]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1f1]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[19c]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1dd]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[132]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IntrEna
</UL>

<P><STRONG><a name="[134]"></a>protected_and</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.protected_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protected_and
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>

<P><STRONG><a name="[de]"></a>protected_or</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.protected_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protected_or
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>protected_xor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.protected_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protected_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>

<P><STRONG><a name="[10f]"></a>USBD_ReqGetDescriptor</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ReqGetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[10b]"></a>USBD_ReqGetStatus</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_ReqGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[10c]"></a>USBD_ReqSetClrFeature</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_ReqSetClrFeature &rArr; USBD_ClrStallEP &rArr; USBD_ResetEP &rArr; protected_or
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WakeUpCfg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqClrFeature_MSC
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[110]"></a>USBD_ReqSetConfiguration</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_ReqSetConfiguration &rArr; USBD_ConfigEP &rArr; USBD_ResetEP &rArr; protected_or
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableEP
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableEP
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Configure
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[111]"></a>USBD_ReqSetInterface</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, usbd_core.o(i.USBD_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_ReqSetInterface &rArr; USBD_ConfigEP &rArr; USBD_ResetEP &rArr; protected_or
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableEP
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableEP
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[e4]"></a>USBD_CDC_ACM_EP_BULKIN_HandleData</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKIN_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_Event
</UL>

<P><STRONG><a name="[e7]"></a>USBD_CDC_ACM_EP_BULKOUT_HandleData</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKOUT_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP &rArr; protected_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[13d]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[13f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

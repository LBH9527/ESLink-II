<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\eslink_boot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\eslink_boot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Nov 21 10:20:47 2018
<BR><P>
<H3>Maximum Stack Usage =       1392 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBD_CLS_EP_BULK_Event &rArr; USBD_CLS_EP_BULKOUT_Event &rArr; USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; debug_process_command &rArr; download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[53]">ADC1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[76]">CLOCK_CONFIG_FllStableDelay</a> from clock_config.o(i.CLOCK_CONFIG_FllStableDelay) referenced from clock_config.o(i.BOARD_BootClockRUN)
 <LI><a href="#[32]">CMP0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[33]">CMP1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[42]">DAC0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[64]">DMA0_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[65]">DMA1_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[66]">DMA2_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[67]">DMA3_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[68]">DMA_Error_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[60]">DefaultISR</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[60]">DefaultISR</a> from startup_mk22f12810.o(.text) referenced 153 times from startup_mk22f12810.o(RESET)
 <LI><a href="#[1c]">FTF_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[34]">FTM0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[35]">FTM1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[36]">FTM2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[69]">I2C0_DriverIRQHandler</a> from fsl_i2c.o(i.I2C0_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6a]">I2C1_DriverIRQHandler</a> from fsl_i2c.o(i.I2C1_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6e]">I2S0_Rx_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[27]">I2S0_Rx_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6d]">I2S0_Tx_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[26]">I2S0_Tx_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1f]">LLWU_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[44]">LPTMR0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6f]">LPUART0_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[28]">LPUART0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[43]">MCG_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3e]">PDB0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3a]">PIT0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3b]">PIT1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3c]">PIT2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3d]">PIT3_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[45]">PORTA_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[46]">PORTB_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[47]">PORTC_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[48]">PORTD_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[49]">PORTE_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[39]">RTC_Seconds_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5e]">Reserved100_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5f]">Reserved101_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[e]">Reserved20_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[f]">Reserved21_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[10]">Reserved22_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[11]">Reserved23_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[12]">Reserved24_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[13]">Reserved25_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[14]">Reserved26_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[15]">Reserved27_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[16]">Reserved28_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[17]">Reserved29_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[18]">Reserved30_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[19]">Reserved31_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[21]">Reserved39_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2f]">Reserved53_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[30]">Reserved54_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[37]">Reserved61_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[40]">Reserved70_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[41]">Reserved71_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4b]">Reserved81_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4c]">Reserved82_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4d]">Reserved83_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4e]">Reserved84_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4f]">Reserved85_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[51]">Reserved87_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[52]">Reserved88_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[54]">Reserved90_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[55]">Reserved91_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[56]">Reserved92_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[57]">Reserved93_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[58]">Reserved94_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[59]">Reserved95_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5a]">Reserved96_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5b]">Reserved97_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5c]">Reserved98_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5d]">Reserved99_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6b]">SPI0_DriverIRQHandler</a> from fsl_dspi.o(i.SPI0_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6c]">SPI1_DriverIRQHandler</a> from fsl_dspi.o(i.SPI1_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4a]">SWI_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_mk22f12810.o(i.SystemInit) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[71]">UART0_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2a]">UART0_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[70]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[29]">UART0_RX_TX_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[73]">UART1_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2c]">UART1_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[72]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2b]">UART1_RX_TX_IRQHandler</a> from uart.o(i.UART1_RX_TX_IRQHandler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[75]">UART2_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2e]">UART2_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[74]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2d]">UART2_RX_TX_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3f]">USB0_IRQHandler</a> from usbd_mk20d5.o(i.USB0_IRQHandler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7d]">USBD_CDC_ACM_EP_BULK_Event</a> from usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULK_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[7c]">USBD_CDC_ACM_EP_INTIN_Event</a> from usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_INTIN_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[7a]">USBD_CLS_EP_BULK_Event</a> from usbd_cls.o(i.USBD_CLS_EP_BULK_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[7e]">USBD_Configure_Event</a> from usb_config.o(i.USBD_Configure_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[79]">USBD_EndPoint0</a> from usbd_core.o(i.USBD_EndPoint0) referenced from usb_config.o(.constdata)
 <LI><a href="#[7b]">USBD_HID_EP_INT_Event</a> from usbd_hid.o(i.USBD_HID_EP_INT_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[77]">USBD_Reset_Event</a> from usb_config.o(i.USBD_Reset_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[78]">USBD_SOF_Event</a> from usb_config.o(i.USBD_SOF_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[63]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[61]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[7f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[84]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[13f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mk22f12810.o(.text)
<LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FTF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2S0_Rx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>I2S0_Tx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>LPUART0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Reserved100_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>Reserved101_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reserved22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reserved23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Reserved24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Reserved25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Reserved26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Reserved27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Reserved28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Reserved29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Reserved30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Reserved31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Reserved84_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Reserved90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Reserved94_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved96_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved97_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved98_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Reserved99_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[80]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[145]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_BootToFeeMode &rArr; CLOCK_SetFeeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbfs0Clock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>BOARD_InitPins</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_InitPins
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>CLOCK_BootToFeeMode</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_BootToFeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_BootToFeeMode &rArr; CLOCK_SetFeeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFeeMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[89]"></a>CLOCK_EnableUsbfs0Clock</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, fsl_clock.o(i.CLOCK_EnableUsbfs0Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_EnableUsbfs0Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[86]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[8d]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>

<P><STRONG><a name="[8e]"></a>CLOCK_SetFeeMode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_SetFeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SetFeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>

<P><STRONG><a name="[88]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[90]"></a>FLASH_Erase</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, fsl_flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASH_Erase &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_user_key
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
</UL>

<P><STRONG><a name="[97]"></a>FLASH_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
</UL>

<P><STRONG><a name="[99]"></a>FLASH_PrepareExecuteInRamFunctions</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_flash.o(i.FLASH_PrepareExecuteInRamFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_run_command
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_Program</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, fsl_flash.o(i.FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASH_Program &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
</UL>

<P><STRONG><a name="[9d]"></a>FLASH_VerifyErase</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, fsl_flash.o(i.FLASH_VerifyErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASH_VerifyErase &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
</UL>

<P><STRONG><a name="[9e]"></a>FLASH_VerifyProgram</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_VerifyProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dspi.o(i.SPI0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_DriverIRQHandler &rArr; DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dspi.o(i.SPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_DriverIRQHandler &rArr; DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_10ms_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_mk22f12810.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[70]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_RX_TX_DriverIRQHandler &rArr; UART0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[72]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_RX_TX_DriverIRQHandler &rArr; UART1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart.o(i.UART1_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART1_RX_TX_IRQHandler &rArr; circ_buf_count_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[74]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_RX_TX_DriverIRQHandler &rArr; UART2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>USB0_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_mk20d5.o(i.USB0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB0_IRQHandler &rArr; USBD_Handler &rArr; USBD_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_or
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>USBD_CDC_ACM_ClearCommFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_ClearCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[b0]"></a>USBD_CDC_ACM_DataReceived</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
</UL>

<P><STRONG><a name="[ab]"></a>USBD_CDC_ACM_EP_BULKIN_Event</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CDC_ACM_EP_BULKIN_Event &rArr; USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULK_Event
</UL>

<P><STRONG><a name="[ae]"></a>USBD_CDC_ACM_EP_BULKOUT_Event</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_ACM_EP_BULKOUT_Event &rArr; USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataReceived
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULK_Event
</UL>

<P><STRONG><a name="[7d]"></a>USBD_CDC_ACM_EP_BULK_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_ACM_EP_BULK_Event &rArr; USBD_CDC_ACM_EP_BULKIN_Event &rArr; USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>USBD_CDC_ACM_EP_INTIN_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_INTIN_Event))
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>USBD_CDC_ACM_GetCommFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[e0]"></a>USBD_CDC_ACM_GetEncapsulatedResponse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetEncapsulatedResponse))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[b2]"></a>USBD_CDC_ACM_GetLineCoding</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_GetLineCoding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortGetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[b4]"></a>USBD_CDC_ACM_Initialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[b3]"></a>USBD_CDC_ACM_PortGetLineCoding</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_PortGetLineCoding))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetLineCoding
</UL>

<P><STRONG><a name="[b5]"></a>USBD_CDC_ACM_PortInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_PortInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Initialize
</UL>

<P><STRONG><a name="[b7]"></a>USBD_CDC_ACM_PortReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_PortReset))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>

<P><STRONG><a name="[bc]"></a>USBD_CDC_ACM_PortSetControlLineState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_PortSetControlLineState))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetControlLineState
</UL>

<P><STRONG><a name="[b8]"></a>USBD_CDC_ACM_PortSetLineCoding</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_PortSetLineCoding))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetLineCoding
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>

<P><STRONG><a name="[b6]"></a>USBD_CDC_ACM_Reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset_Event
</UL>

<P><STRONG><a name="[b9]"></a>USBD_CDC_ACM_Reset_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_ACM_Reset_Event &rArr; USBD_CDC_ACM_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset_Event
</UL>

<P><STRONG><a name="[ba]"></a>USBD_CDC_ACM_SOF_Event</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_ACM_SOF_Event &rArr; USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataReceived
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOF_Event
</UL>

<P><STRONG><a name="[e3]"></a>USBD_CDC_ACM_SendBreak</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SendBreak))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[dd]"></a>USBD_CDC_ACM_SendEncapsulatedCommand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SendEncapsulatedCommand))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[de]"></a>USBD_CDC_ACM_SetCommFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[bb]"></a>USBD_CDC_ACM_SetControlLineState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetControlLineState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_SetControlLineState
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetControlLineState
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[bd]"></a>USBD_CDC_ACM_SetLineCoding</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_SetLineCoding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[be]"></a>USBD_CLS_BulkOut</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_cls.o(i.USBD_CLS_BulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; debug_process_command &rArr; download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[c0]"></a>USBD_CLS_DataInTransfer</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_cls.o(i.USBD_CLS_DataInTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CLS_DataInTransfer &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKIN_Event
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_BulkOut
</UL>

<P><STRONG><a name="[bf]"></a>USBD_CLS_DataOutTransfer</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_user_cls_icd.o(i.USBD_CLS_DataOutTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; debug_process_command &rArr; download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eslink_process_command
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cls_packet_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_BulkOut
</UL>

<P><STRONG><a name="[c5]"></a>USBD_CLS_EP_BULKIN_Event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cls.o(i.USBD_CLS_EP_BULKIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CLS_EP_BULKIN_Event &rArr; USBD_CLS_DataInTransfer &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULK_Event
</UL>

<P><STRONG><a name="[c6]"></a>USBD_CLS_EP_BULKOUT_Event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_cls.o(i.USBD_CLS_EP_BULKOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = USBD_CLS_EP_BULKOUT_Event &rArr; USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; debug_process_command &rArr; download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_BulkOut
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULK_Event
</UL>

<P><STRONG><a name="[7a]"></a>USBD_CLS_EP_BULK_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_cls.o(i.USBD_CLS_EP_BULK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = USBD_CLS_EP_BULK_Event &rArr; USBD_CLS_EP_BULKOUT_Event &rArr; USBD_CLS_BulkOut &rArr; USBD_CLS_DataOutTransfer &rArr; eslink_process_command &rArr; debug_process_command &rArr; download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKOUT_Event
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>USBD_CLS_Reset_Event</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_user_cls_icd.o(i.USBD_CLS_Reset_Event))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cls_packet_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset_Event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
</UL>

<P><STRONG><a name="[137]"></a>USBD_CLS_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_user_cls_icd.o(i.USBD_CLS_init))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[c7]"></a>USBD_ClrStallEP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_ClrStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ClrStallEP &rArr; USBD_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[c9]"></a>USBD_ConfigEP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ConfigEP &rArr; USBD_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[fd]"></a>USBD_Configure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[7e]"></a>USBD_Configure_Event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_config.o(i.USBD_Configure_Event))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Configure_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>USBD_Connect</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[cb]"></a>USBD_DataInStage</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_DataInStage &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[cc]"></a>USBD_DataOutStage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_DataOutStage &rArr; USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[ce]"></a>USBD_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_DirCtrlEP))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[fc]"></a>USBD_DisableEP</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_DisableEP))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[fe]"></a>USBD_EnableEP</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_EnableEP))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[79]"></a>USBD_EndPoint0</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, usbd_core.o(i.USBD_EndPoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_EndPoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_MSC_ReqToIF
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DirCtrlEP
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>USBD_EndPoint0_Out_CDC_ReqToIF</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usbd_core_cdc.o(i.USBD_EndPoint0_Out_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EndPoint0_Out_CDC_ReqToIF &rArr; USBD_StatusInStage &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetLineCoding
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetCommFeature
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendEncapsulatedCommand
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[da]"></a>USBD_EndPoint0_Out_HID_ReqToIF</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_core_hid.o(i.USBD_EndPoint0_Out_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EndPoint0_Out_HID_ReqToIF &rArr; USBD_StatusInStage &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetReport
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d8]"></a>USBD_EndPoint0_Setup_CDC_ReqToIF</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usbd_core_cdc.o(i.USBD_EndPoint0_Setup_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_EndPoint0_Setup_CDC_ReqToIF &rArr; USBD_DataInStage &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetControlLineState
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendBreak
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetLineCoding
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetEncapsulatedResponse
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetCommFeature
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_ClearCommFeature
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d6]"></a>USBD_EndPoint0_Setup_HID_ReqToIF</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, usbd_core_hid.o(i.USBD_EndPoint0_Setup_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EndPoint0_Setup_HID_ReqToIF &rArr; USBD_DataInStage &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetProtocol
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetIdle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReport
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetProtocol
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d7]"></a>USBD_EndPoint0_Setup_MSC_ReqToIF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_config.o(i.USBD_EndPoint0_Setup_MSC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[ca]"></a>USBD_HID_Configure_Event</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_Configure_Event))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Configure_Event
</UL>

<P><STRONG><a name="[e9]"></a>USBD_HID_EP_INTIN_Event</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, usbd_hid.o(i.USBD_HID_EP_INTIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_HID_EP_INTIN_Event &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SOF_Event
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INT_Event
</UL>

<P><STRONG><a name="[eb]"></a>USBD_HID_EP_INTOUT_Event</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbd_hid.o(i.USBD_HID_EP_INTOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_HID_EP_INTOUT_Event &rArr; USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INT_Event
</UL>

<P><STRONG><a name="[7b]"></a>USBD_HID_EP_INT_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_EP_INT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_HID_EP_INT_Event &rArr; USBD_HID_EP_INTOUT_Event &rArr; USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTOUT_Event
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>USBD_HID_GetIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_GetIdle))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[e7]"></a>USBD_HID_GetProtocol</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_GetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_GetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[e4]"></a>USBD_HID_GetReport</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_GetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[ee]"></a>USBD_HID_SOF_Event</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, usbd_hid.o(i.USBD_HID_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_HID_SOF_Event &rArr; USBD_HID_EP_INTIN_Event &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOF_Event
</UL>

<P><STRONG><a name="[e6]"></a>USBD_HID_SetIdle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_SetIdle))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[e8]"></a>USBD_HID_SetProtocol</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_SetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[df]"></a>USBD_HID_SetReport</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_SetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_SetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
</UL>

<P><STRONG><a name="[aa]"></a>USBD_Handler</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, usbd_mk20d5.o(i.USBD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_Handler &rArr; USBD_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_core
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Suspend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Resume
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>USBD_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, usbd_mk20d5.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IntrEna
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[f5]"></a>USBD_IntrEna</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_IntrEna))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[139]"></a>USBD_RTX_TaskInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_config.o(i.USBD_RTX_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[b1]"></a>USBD_ReadEP</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, usbd_mk20d5.o(i.USBD_ReadEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_xor
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_and
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTOUT_Event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[fb]"></a>USBD_ReqClrFeature_MSC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_config.o(i.USBD_ReqClrFeature_MSC))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[f9]"></a>USBD_ReqGetDescriptor_HID</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, usbd_core_hid.o(i.USBD_ReqGetDescriptor_HID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>

<P><STRONG><a name="[f0]"></a>USBD_Reset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_mk20d5.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[c8]"></a>USBD_ResetEP</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, usbd_mk20d5.o(i.USBD_ResetEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_or
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_and
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
</UL>

<P><STRONG><a name="[77]"></a>USBD_Reset_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_config.o(i.USBD_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Reset_Event &rArr; USBD_CDC_ACM_Reset_Event &rArr; USBD_CDC_ACM_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>USBD_Resume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[78]"></a>USBD_SOF_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_config.o(i.USBD_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_SOF_Event &rArr; USBD_HID_SOF_Event &rArr; USBD_HID_EP_INTIN_Event &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SOF_Event
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d9]"></a>USBD_SetStallEP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_SetStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[cd]"></a>USBD_SetupStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SetupStage &rArr; USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d1]"></a>USBD_StatusInStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_StatusInStage &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[dc]"></a>USBD_StatusOutStage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_StatusOutStage &rArr; USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[f2]"></a>USBD_Suspend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[fa]"></a>USBD_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.USBD_WakeUpCfg))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[ad]"></a>USBD_WriteEP</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_mk20d5.o(i.USBD_WriteEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protected_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataInTransfer
</UL>

<P><STRONG><a name="[148]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[149]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[100]"></a>application_check_and_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, update.o(i.application_check_and_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = application_check_and_run &rArr; check_app_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_app_validate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_run
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>bsp_init_systick</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, systick.o(i.bsp_init_systick))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>check_sum</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, es_common.o(i.check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[a6]"></a>circ_buf_count_free</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, circ_buf.o(i.circ_buf_count_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = circ_buf_count_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>circ_buf_count_used</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, circ_buf.o(i.circ_buf_count_used))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>circ_buf_pop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>circ_buf_push</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>clear_timing_info</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, settings_rom.o(i.clear_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = clear_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stay_in_bootloader
</UL>

<P><STRONG><a name="[c3]"></a>cls_packet_write</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, usbd_user_cls_icd.o(i.cls_packet_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cls_packet_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_Reset_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
</UL>

<P><STRONG><a name="[106]"></a>config_rom_set</STRONG> (Thumb, 62 bytes, Stack size 96 bytes, settings_rom.o(i.config_rom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timing_info
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hr_timing_info
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timing_info
</UL>

<P><STRONG><a name="[10a]"></a>debug_process_command</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, debug_boot.o(i.debug_process_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = debug_process_command &rArr; download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hr_chipinfo
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_hr_chipinfo
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eslink_process_command
</UL>

<P><STRONG><a name="[118]"></a>download_timing_end</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, eslink_boot.o(i.download_timing_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = download_timing_end &rArr; get_update_app_checksum &rArr; iap_flash_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program_end
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_update_app_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[11a]"></a>download_timinginfo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eslink_boot.o(i.download_timinginfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = download_timinginfo &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timing_info
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[128]"></a>es_set_trget_power</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.es_set_trget_power))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>eslink_process_command</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_user_cls_icd.o(i.eslink_process_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = eslink_process_command &rArr; debug_process_command &rArr; download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
</UL>

<P><STRONG><a name="[96]"></a>flash_cache_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_cache_clear))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[11c]"></a>fmc_flash_cache_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_flash.o(i.fmc_flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fmc_flash_cache_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[11d]"></a>fmc_flash_prefetch_speculation_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_flash.o(i.fmc_flash_prefetch_speculation_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[131]"></a>get_hr_target_info</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, settings_rom.o(i.get_hr_target_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_hr_target_info
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hr_chipinfo
</UL>

<P><STRONG><a name="[126]"></a>get_offlink_app_version</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, update.o(i.get_offlink_app_version))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_offline_version
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>get_timing_checksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings_rom.o(i.get_timing_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stay_in_bootloader
</UL>

<P><STRONG><a name="[132]"></a>get_timing_info</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, settings_rom.o(i.get_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_timing_info
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_timinginfo
</UL>

<P><STRONG><a name="[133]"></a>get_update_app</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings_rom.o(i.get_update_app))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stay_in_bootloader
</UL>

<P><STRONG><a name="[115]"></a>get_update_app_checksum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, update.o(i.get_update_app_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_update_app_checksum &rArr; iap_flash_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_offline_hex_end
</UL>

<P><STRONG><a name="[11f]"></a>gpio_init</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>iap_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iap_flash_intf.o(i.iap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iap_Init &rArr; FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
</UL>

<P><STRONG><a name="[122]"></a>iap_erase_chip</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, iap_flash_intf.o(i.iap_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iap_erase_chip &rArr; iap_erase_sector &rArr; FLASH_VerifyErase &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program
</UL>

<P><STRONG><a name="[107]"></a>iap_erase_sector</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iap_flash_intf.o(i.iap_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = iap_erase_sector &rArr; FLASH_VerifyErase &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_chip
</UL>

<P><STRONG><a name="[11e]"></a>iap_flash_checksum</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, iap_flash_intf.o(i.iap_flash_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iap_flash_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_update_app_checksum
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stay_in_bootloader
</UL>

<P><STRONG><a name="[109]"></a>iap_flash_program</STRONG> (Thumb, 104 bytes, Stack size 1056 bytes, iap_flash_intf.o(i.iap_flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program
</UL>

<P><STRONG><a name="[123]"></a>info_rom_set</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, settings_rom.o(i.info_rom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = info_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
</UL>

<P><STRONG><a name="[61]"></a>main</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = main &rArr; stay_in_bootloader &rArr; clear_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_set_trget_power
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configured
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stay_in_bootloader
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offlink_app_version
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_check_and_run
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a1]"></a>main_10ms_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.main_10ms_task))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11b]"></a>prog_process_command</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, eslink_boot.o(i.prog_process_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = prog_process_command &rArr; download_timinginfo &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_timinginfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timinginfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_offline_version
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_offline_hex_end
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_offline_hex
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eslink_process_command
</UL>

<P><STRONG><a name="[10b]"></a>read_hr_chipinfo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, debug_boot.o(i.read_hr_chipinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_hr_chipinfo &rArr; get_hr_target_info
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_target_info
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[130]"></a>read_timinginfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eslink_boot.o(i.read_timinginfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_timinginfo &rArr; get_timing_info
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timing_info
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[111]"></a>set_app_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, settings_rom.o(i.set_app_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = set_app_update &rArr; info_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_hr_chipinfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timinginfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stay_in_bootloader
</UL>

<P><STRONG><a name="[110]"></a>set_hr_timing_info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, settings_rom.o(i.set_hr_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = set_hr_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_hr_chipinfo
</UL>

<P><STRONG><a name="[119]"></a>set_timing_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, settings_rom.o(i.set_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timinginfo
</UL>

<P><STRONG><a name="[125]"></a>settings_rom_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, settings_rom.o(i.settings_rom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = settings_rom_init &rArr; iap_Init &rArr; FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>stay_in_bootloader</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, update.o(i.stay_in_bootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = stay_in_bootloader &rArr; clear_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_update_app
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timing_checksum
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timing_info
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_checksum
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>update_app_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, update.o(i.update_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_app_init &rArr; iap_Init &rArr; FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program
</UL>

<P><STRONG><a name="[113]"></a>update_app_program</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, update.o(i.update_app_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = update_app_program &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_chip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_offline_hex
</UL>

<P><STRONG><a name="[116]"></a>update_app_program_end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, update.o(i.update_app_program_end))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_timing_end
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_offline_hex_end
</UL>

<P><STRONG><a name="[135]"></a>usbd_class_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_config.o(i.usbd_class_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_class_init &rArr; USBD_CDC_ACM_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[12c]"></a>usbd_configured</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_configured))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>usbd_connect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_connect))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>usbd_hid_get_protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_get_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetProtocol
</UL>

<P><STRONG><a name="[ea]"></a>usbd_hid_get_report</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_get_report))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReport
</UL>

<P><STRONG><a name="[136]"></a>usbd_hid_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_init))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[ef]"></a>usbd_hid_set_protocol</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_set_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetProtocol
</UL>

<P><STRONG><a name="[ec]"></a>usbd_hid_set_report</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_set_report))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTOUT_Event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetReport
</UL>

<P><STRONG><a name="[12a]"></a>usbd_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_init &rArr; usbd_class_init &rArr; USBD_CDC_ACM_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RTX_TaskInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>usbd_reset_core</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_reset_core))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c2]"></a>get_cmd_data_len</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usbd_user_cls_icd.o(i.get_cmd_data_len))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CLS_DataOutTransfer
</UL>

<P><STRONG><a name="[76]"></a>CLOCK_CONFIG_FllStableDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_config.o(i.CLOCK_CONFIG_FllStableDelay))
<BR>[Address Reference Count : 1]<UL><LI> clock_config.o(i.BOARD_BootClockRUN)
</UL>
<P><STRONG><a name="[120]"></a>GPIO_PinWrite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[8b]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[8c]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin_mux.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[12d]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>download_offline_hex</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eslink_boot.o(i.download_offline_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = download_offline_hex &rArr; update_app_program &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[114]"></a>download_offline_hex_end</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, eslink_boot.o(i.download_offline_hex_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = download_offline_hex_end &rArr; get_update_app_checksum &rArr; iap_flash_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program_end
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_update_app_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[117]"></a>download_timing</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eslink_boot.o(i.download_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = download_timing &rArr; update_app_program &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[12e]"></a>read_offline_version</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eslink_boot.o(i.read_offline_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_offline_version
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offlink_app_version
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_process_command
</UL>

<P><STRONG><a name="[10c]"></a>download_hr_chipinfo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, debug_boot.o(i.download_hr_chipinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = download_hr_chipinfo &rArr; set_hr_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hr_timing_info
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_update
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[10d]"></a>download_timing</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, debug_boot.o(i.download_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = download_timing &rArr; update_app_program &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[10e]"></a>download_timing_end</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, debug_boot.o(i.download_timing_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = download_timing_end &rArr; set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_program_end
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timing_info
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_update_app_checksum
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process_command
</UL>

<P><STRONG><a name="[102]"></a>application_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, update.o(i.application_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = application_run &rArr; jump_to_app
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_check_and_run
</UL>

<P><STRONG><a name="[101]"></a>check_app_validate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, update.o(i.check_app_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_app_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_range
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_check_and_run
</UL>

<P><STRONG><a name="[103]"></a>jump_to_app</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, update.o(i.jump_to_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jump_to_app
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_run
</UL>

<P><STRONG><a name="[104]"></a>test_range</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, update.o(i.test_range))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_app_validate
</UL>

<P><STRONG><a name="[8f]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[9f]"></a>I2C_TransferCommonIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C_TransferCommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TransferCommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_DriverIRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>DSPI_CommonIRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_dspi.o(i.DSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSPI_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>copy_flash_common_bit_operation</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_flash.o(i.copy_flash_common_bit_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[9a]"></a>copy_flash_run_command</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_flash.o(i.copy_flash_run_command))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[94]"></a>flash_cache_clear_process</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_flash.o(i.flash_cache_clear_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flash_prefetch_speculation_clear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flash_cache_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[98]"></a>flash_check_execute_in_ram_function_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_execute_in_ram_function_info))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[92]"></a>flash_check_range</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_flash.o(i.flash_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[93]"></a>flash_check_user_key</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_user_key))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[95]"></a>flash_command_sequence</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_flash.o(i.flash_command_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[91]"></a>flash_get_matched_operation_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_get_matched_operation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[f6]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IntrEna
</UL>

<P><STRONG><a name="[f8]"></a>protected_and</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.protected_and))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>

<P><STRONG><a name="[a9]"></a>protected_or</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.protected_or))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>protected_xor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_mk20d5.o(i.protected_xor))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>

<P><STRONG><a name="[d3]"></a>USBD_ReqGetDescriptor</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_ReqGetDescriptor &rArr; USBD_ReqGetDescriptor_HID
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[cf]"></a>USBD_ReqGetStatus</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ReqGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ReqGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d0]"></a>USBD_ReqSetClrFeature</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_ReqSetClrFeature &rArr; USBD_ClrStallEP &rArr; USBD_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqClrFeature_MSC
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WakeUpCfg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d4]"></a>USBD_ReqSetConfiguration</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, usbd_core.o(i.USBD_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_ReqSetConfiguration &rArr; USBD_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableEP
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableEP
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Configure
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[d5]"></a>USBD_ReqSetInterface</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, usbd_core.o(i.USBD_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_ReqSetInterface &rArr; USBD_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableEP
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableEP
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[ac]"></a>USBD_CDC_ACM_EP_BULKIN_HandleData</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKIN_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_Event
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
</UL>

<P><STRONG><a name="[af]"></a>USBD_CDC_ACM_EP_BULKOUT_HandleData</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKOUT_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

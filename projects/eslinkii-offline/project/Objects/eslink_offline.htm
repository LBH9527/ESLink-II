<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\eslink_offline.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\eslink_offline.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Oct 18 18:04:12 2018
<BR><P>
<H3>Maximum Stack Usage =       1680 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ofl_prj_update &rArr; update_ofl_target_info &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[53]">ADC1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[76]">CLOCK_CONFIG_FllStableDelay</a> from clock_config.o(i.CLOCK_CONFIG_FllStableDelay) referenced from clock_config.o(i.BOARD_BootClockRUN)
 <LI><a href="#[32]">CMP0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[33]">CMP1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[42]">DAC0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[64]">DMA0_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[65]">DMA1_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[66]">DMA2_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[67]">DMA3_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[68]">DMA_Error_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[60]">DefaultISR</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[60]">DefaultISR</a> from startup_mk22f12810.o(.text) referenced 153 times from startup_mk22f12810.o(RESET)
 <LI><a href="#[1c]">FTF_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[34]">FTM0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[35]">FTM1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[36]">FTM2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[69]">I2C0_DriverIRQHandler</a> from fsl_i2c.o(i.I2C0_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6a]">I2C1_DriverIRQHandler</a> from fsl_i2c.o(i.I2C1_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6e]">I2S0_Rx_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[27]">I2S0_Rx_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6d]">I2S0_Tx_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[26]">I2S0_Tx_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1f]">LLWU_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[44]">LPTMR0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6f]">LPUART0_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[28]">LPUART0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[43]">MCG_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3e]">PDB0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3a]">PIT0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3b]">PIT1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3c]">PIT2_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3d]">PIT3_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[45]">PORTA_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[46]">PORTB_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[47]">PORTC_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[48]">PORTD_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[49]">PORTE_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[39]">RTC_Seconds_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5e]">Reserved100_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5f]">Reserved101_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[e]">Reserved20_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[f]">Reserved21_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[10]">Reserved22_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[11]">Reserved23_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[12]">Reserved24_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[13]">Reserved25_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[14]">Reserved26_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[15]">Reserved27_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[16]">Reserved28_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[17]">Reserved29_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[18]">Reserved30_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[19]">Reserved31_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[21]">Reserved39_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[2f]">Reserved53_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[30]">Reserved54_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[37]">Reserved61_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[40]">Reserved70_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[41]">Reserved71_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4b]">Reserved81_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4c]">Reserved82_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4d]">Reserved83_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4e]">Reserved84_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4f]">Reserved85_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[51]">Reserved87_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[52]">Reserved88_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[54]">Reserved90_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[55]">Reserved91_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[56]">Reserved92_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[57]">Reserved93_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[58]">Reserved94_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[59]">Reserved95_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5a]">Reserved96_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5b]">Reserved97_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5c]">Reserved98_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5d]">Reserved99_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6b]">SPI0_DriverIRQHandler</a> from fsl_dspi.o(i.SPI0_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6c]">SPI1_DriverIRQHandler</a> from fsl_dspi.o(i.SPI1_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[4a]">SWI_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_mk22f12810.o(i.SystemInit) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[71]">UART0_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2a]">UART0_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[70]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[29]">UART0_RX_TX_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[73]">UART1_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2c]">UART1_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[72]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2b]">UART1_RX_TX_IRQHandler</a> from uart.o(i.UART1_RX_TX_IRQHandler) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[75]">UART2_ERR_DriverIRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2e]">UART2_ERR_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[74]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[2d]">UART2_RX_TX_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[3f]">USB0_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a> from startup_mk22f12810.o(.text) referenced from startup_mk22f12810.o(RESET)
 <LI><a href="#[63]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk22f12810.o(.text)
 <LI><a href="#[78]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[77]">gpio_key0_down</a> from gpio.o(i.gpio_key0_down) referenced from key.o(i.Key_InitVar)
 <LI><a href="#[7b]">logo_display</a> from ofl_menu.o(i.logo_display) referenced from ofl_menu.o(.data)
 <LI><a href="#[61]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7a]">ofl_select_display</a> from ofl_menu.o(i.ofl_select_display) referenced from ofl_menu.o(.data)
 <LI><a href="#[79]">update_display</a> from ofl_menu.o(i.update_display) referenced from ofl_menu.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[7c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[81]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[13e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mk22f12810.o(RESET)
<LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>FTF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2S0_Rx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>I2S0_Tx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>LPUART0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Reserved100_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>Reserved101_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reserved22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reserved23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Reserved24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Reserved25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Reserved26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Reserved27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Reserved28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Reserved29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Reserved30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Reserved31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Reserved84_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Reserved90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Reserved94_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved96_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved97_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved98_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Reserved99_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk22f12810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_name
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[145]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_BootToFeeMode &rArr; CLOCK_SetFeeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbfs0Clock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>BOARD_InitPins</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_InitPins
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>CLOCK_BootToFeeMode</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_BootToFeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_BootToFeeMode &rArr; CLOCK_SetFeeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFeeMode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[86]"></a>CLOCK_EnableUsbfs0Clock</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnableUsbfs0Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableUsbfs0Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[83]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[8a]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>

<P><STRONG><a name="[8b]"></a>CLOCK_SetFeeMode</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fsl_clock.o(i.CLOCK_SetFeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_SetFeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToFeeMode
</UL>

<P><STRONG><a name="[85]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[8f]"></a>FLASH_Erase</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_user_key
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
</UL>

<P><STRONG><a name="[96]"></a>FLASH_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, fsl_flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
</UL>

<P><STRONG><a name="[98]"></a>FLASH_PrepareExecuteInRamFunctions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_PrepareExecuteInRamFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_run_command
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[9b]"></a>FLASH_Program</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, fsl_flash.o(i.FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_VerifyErase</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, fsl_flash.o(i.FLASH_VerifyErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FLASH_VerifyErase &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
</UL>

<P><STRONG><a name="[9d]"></a>FLASH_VerifyProgram</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_VerifyProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_VerifyProgram &rArr; flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>OLED_EndDraw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled.o(i.OLED_EndDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_EndDraw &rArr; OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>

<P><STRONG><a name="[a4]"></a>OLED_PutPixel</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, oled.o(i.OLED_PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>

<P><STRONG><a name="[12b]"></a>OLED_StartDraw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled.o(i.OLED_StartDraw))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>

<P><STRONG><a name="[6b]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_dspi.o(i.SPI0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI0_DriverIRQHandler &rArr; DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_dspi.o(i.SPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_DriverIRQHandler &rArr; DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysTick_Handler &rArr; main_10ms_task &rArr; key_scan &rArr; bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_10ms_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_mk22f12810.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[70]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_RX_TX_DriverIRQHandler &rArr; UART0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[72]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_RX_TX_DriverIRQHandler &rArr; UART1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uart.o(i.UART1_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_RX_TX_IRQHandler &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[74]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_RX_TX_DriverIRQHandler &rArr; UART2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk22f12810.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[146]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[12a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_select_display
</UL>

<P><STRONG><a name="[147]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[148]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[149]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b2]"></a>application_check_and_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, update.o(i.application_check_and_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = application_check_and_run &rArr; application_run &rArr; jump_to_app
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_app_validate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_run
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_display
</UL>

<P><STRONG><a name="[11d]"></a>bsp_init_systick</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, systick.o(i.bsp_init_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_init_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>check_sum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, es_common.o(i.check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prj_update
</UL>

<P><STRONG><a name="[aa]"></a>circ_buf_count_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, circ_buf.o(i.circ_buf_count_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
</UL>

<P><STRONG><a name="[a9]"></a>circ_buf_count_used</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_count_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>

<P><STRONG><a name="[110]"></a>circ_buf_init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, circ_buf.o(i.circ_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear_buffers
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
</UL>

<P><STRONG><a name="[a8]"></a>circ_buf_pop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>

<P><STRONG><a name="[ab]"></a>circ_buf_push</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, circ_buf.o(i.circ_buf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circ_buf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
</UL>

<P><STRONG><a name="[bb]"></a>circ_buf_read</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, circ_buf.o(i.circ_buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = circ_buf_read &rArr; circ_buf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read_data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_data
</UL>

<P><STRONG><a name="[bc]"></a>circ_buf_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, circ_buf.o(i.circ_buf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_data
</UL>

<P><STRONG><a name="[d1]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[bf]"></a>config_rom_set</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, settings_rom.o(i.config_rom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timing_info
</UL>

<P><STRONG><a name="[d8]"></a>disk_initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_initialize &rArr; sf_read_info &rArr; sf_read_id &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[e9]"></a>disk_ioctl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[da]"></a>disk_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_read &rArr; spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[fa]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[dc]"></a>disk_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[df]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
</UL>

<P><STRONG><a name="[e2]"></a>f_closedir</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
</UL>

<P><STRONG><a name="[e3]"></a>f_getfree</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[e5]"></a>f_lseek</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>

<P><STRONG><a name="[e7]"></a>f_mkfs</STRONG> (Thumb, 1592 bytes, Stack size 112 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[eb]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[ec]"></a>f_open</STRONG> (Thumb, 360 bytes, Stack size 144 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
</UL>

<P><STRONG><a name="[f1]"></a>f_opendir</STRONG> (Thumb, 114 bytes, Stack size 88 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
</UL>

<P><STRONG><a name="[f2]"></a>f_read</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>

<P><STRONG><a name="[f3]"></a>f_readdir</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
</UL>

<P><STRONG><a name="[e0]"></a>f_sync</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[c7]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, unicode.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[be]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[95]"></a>flash_cache_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flash.o(i.flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[133]"></a>flash_send_byte</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, spi_flash.o(i.flash_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_id
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>

<P><STRONG><a name="[fb]"></a>fmc_flash_cache_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_flash.o(i.fmc_flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_flash_cache_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[fc]"></a>fmc_flash_prefetch_speculation_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_flash.o(i.fmc_flash_prefetch_speculation_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[fe]"></a>get_all_ofl_file</STRONG> (Thumb, 76 bytes, Stack size 136 bytes, offline_file.o(i.get_all_ofl_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = get_all_ofl_file &rArr; file_find &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init
</UL>

<P><STRONG><a name="[c4]"></a>get_fat</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[ea]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[102]"></a>get_ofl_file_name</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, offline_file.o(i.get_ofl_file_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ofl_file_name
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_menu
</UL>

<P><STRONG><a name="[107]"></a>get_ofl_file_num</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, offline_file.o(i.get_ofl_file_num))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_menu
</UL>

<P><STRONG><a name="[106]"></a>get_ofl_menu</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ofl_menu.o(i.get_ofl_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ofl_menu &rArr; get_ofl_file_name
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_num
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_file_name
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
</UL>

<P><STRONG><a name="[108]"></a>gpio_init</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>gpio_key0_down</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.gpio_key0_down))
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.Key_InitVar)
</UL>
<P><STRONG><a name="[10a]"></a>gpio_set_trget_power</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio.o(i.gpio_set_trget_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_set_trget_power
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>iap_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iap_flash_intf.o(i.iap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iap_Init &rArr; FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
</UL>

<P><STRONG><a name="[c0]"></a>iap_erase_sector</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iap_flash_intf.o(i.iap_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iap_erase_sector &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>

<P><STRONG><a name="[c2]"></a>iap_flash_program</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, iap_flash_intf.o(i.iap_flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>

<P><STRONG><a name="[10e]"></a>info_rom_set</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, settings_rom.o(i.info_rom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = info_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_flash_program
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_erase_sector
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_link_offline
</UL>

<P><STRONG><a name="[10f]"></a>key_clear_buffers</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(i.key_clear_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[111]"></a>key_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = key_init &rArr; key_clear_buffers &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear_buffers
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_InitVar
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>key_read_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key.o(i.key_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = key_read_data &rArr; circ_buf_read &rArr; circ_buf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>key_scan</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = key_scan &rArr; bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_detect_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_10ms_task
</UL>

<P><STRONG><a name="[b7]"></a>key_write_data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, key.o(i.key_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_detect_key
</UL>

<P><STRONG><a name="[7b]"></a>logo_display</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ofl_menu.o(i.logo_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = logo_display &rArr; oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ofl_menu.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = main &rArr; ofl_prj_update &rArr; update_ofl_target_info &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_systick
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_trget_power
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_rom_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prj_update
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a5]"></a>main_10ms_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.main_10ms_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main_10ms_task &rArr; key_scan &rArr; bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[120]"></a>menu_display</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ofl_menu.o(i.menu_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_display
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>menu_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ofl_menu.o(i.menu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = menu_init &rArr; get_ofl_menu &rArr; get_ofl_file_name
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_menu
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>msg_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, message.o(i.msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = msg_init &rArr; circ_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
</UL>

<P><STRONG><a name="[117]"></a>msg_read_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, message.o(i.msg_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msg_read_data &rArr; circ_buf_read &rArr; circ_buf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_display
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_select_display
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[11e]"></a>msg_write_data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, message.o(i.msg_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msg_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>ofl_display</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ofl_menu.o(i.ofl_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ofl_display &rArr; ofl_diplay_str_inv &rArr; oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_diplay_str_inv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_diplay_str
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_select_display
</UL>

<P><STRONG><a name="[125]"></a>ofl_file_get_partition</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, offline_file.o(i.ofl_file_get_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ofl_file_get_partition &rArr; ofl_file_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prj_update
</UL>

<P><STRONG><a name="[11b]"></a>ofl_file_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ofl_file_init &rArr; get_all_ofl_file &rArr; file_find &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>ofl_file_open</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, offline_file.o(i.ofl_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ofl_file_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_get_partition
</UL>

<P><STRONG><a name="[100]"></a>ofl_file_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, offline_file.o(i.ofl_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ofl_file_read &rArr; file_read &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_get_partition
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_target_info
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_serialnum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_info
</UL>

<P><STRONG><a name="[101]"></a>ofl_file_read_end</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_read_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ofl_file_read_end &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_get_partition
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_target_info
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_serialnum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_info
</UL>

<P><STRONG><a name="[ff]"></a>ofl_file_read_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, offline_file.o(i.ofl_file_read_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_get_partition
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_target_info
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_serialnum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_info
</UL>

<P><STRONG><a name="[11f]"></a>ofl_prj_update</STRONG> (Thumb, 126 bytes, Stack size 168 bytes, ofl_prj_decoder.o(i.ofl_prj_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = ofl_prj_update &rArr; update_ofl_target_info &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_get_partition
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_target_info
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_serialnum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_info
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>ofl_select_display</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, ofl_menu.o(i.ofl_select_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ofl_select_display &rArr; ofl_display &rArr; ofl_diplay_str_inv &rArr; oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_display
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ofl_menu.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>oled_clr_scr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, oled.o(i.oled_clr_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oled_clr_scr &rArr; OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_display
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_select_display
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[116]"></a>oled_display_str</STRONG> (Thumb, 338 bytes, Stack size 160 bytes, oled.o(i.oled_display_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_StartDraw
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_EndDraw
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_diplay_str_inv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_diplay_str
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_display
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_select_display
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_display
</UL>

<P><STRONG><a name="[11a]"></a>oled_init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, oled.o(i.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oled_init &rArr; oled_clr_scr &rArr; OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_delay_ms
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>online_file_erase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, settings_spi_flash.o(i.online_file_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = online_file_erase &rArr; sf_erase_sector &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_info
</UL>

<P><STRONG><a name="[105]"></a>online_file_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, settings_spi_flash.o(i.online_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = online_file_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_serialnum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ofl_info
</UL>

<P><STRONG><a name="[c5]"></a>put_fat</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[9e]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[12f]"></a>set_app_link_offline</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings_rom.o(i.set_app_link_offline))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_app_link_offline &rArr; info_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_display
</UL>

<P><STRONG><a name="[130]"></a>set_timing_info</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, settings_rom.o(i.set_timing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = set_timing_info &rArr; config_rom_set &rArr; iap_flash_program &rArr; FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ofl_target_info
</UL>

<P><STRONG><a name="[119]"></a>settings_rom_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, settings_rom.o(i.settings_rom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = settings_rom_init &rArr; iap_Init &rArr; FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>sf_erase_chip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_flash.o(i.sf_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_erase_chip &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_mount
</UL>

<P><STRONG><a name="[dd]"></a>sf_erase_sector</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, spi_flash.o(i.sf_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sf_erase_sector &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_erase
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[136]"></a>sf_page_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, spi_flash.o(i.sf_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write
</UL>

<P><STRONG><a name="[d9]"></a>sf_read_info</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, spi_flash.o(i.sf_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sf_read_info &rArr; sf_read_id &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[db]"></a>spi_flash_read</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi_flash.o(i.spi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_flash_read &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[de]"></a>spi_flash_write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, spi_flash.o(i.spi_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[79]"></a>update_display</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ofl_menu.o(i.update_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = update_display &rArr; oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_check_and_run
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_link_offline
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ofl_menu.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76]"></a>CLOCK_CONFIG_FllStableDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_config.o(i.CLOCK_CONFIG_FllStableDelay))
<BR>[Address Reference Count : 1]<UL><LI> clock_config.o(i.BOARD_BootClockRUN)
</UL>
<P><STRONG><a name="[109]"></a>GPIO_PinWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[10c]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_trget_power
</UL>

<P><STRONG><a name="[10b]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_trget_power
</UL>

<P><STRONG><a name="[112]"></a>Key_InitVar</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, key.o(i.Key_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[b6]"></a>bsp_detect_key</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, key.o(i.bsp_detect_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_detect_key &rArr; key_write_data &rArr; circ_buf_write &rArr; circ_buf_count_free &rArr; circ_buf_count_used
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[88]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[89]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin_mux.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[137]"></a>sf_read_id</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, spi_flash.o(i.sf_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_read_id &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_info
</UL>

<P><STRONG><a name="[132]"></a>sf_set_cs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi_flash.o(i.sf_set_cs))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_write_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_read_id
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>

<P><STRONG><a name="[134]"></a>sf_wait_busy</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi_flash.o(i.sf_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay_ms
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>

<P><STRONG><a name="[135]"></a>sf_write_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(i.sf_write_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_write_disable &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>

<P><STRONG><a name="[131]"></a>sf_write_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(i.sf_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_write_enable &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_send_byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_set_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_page_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_sector
</UL>

<P><STRONG><a name="[138]"></a>spi_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi_flash.o(i.spi_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_wait_busy
</UL>

<P><STRONG><a name="[103]"></a>get_ofl_info</STRONG> (Thumb, 104 bytes, Stack size 160 bytes, ofl_prj_decoder.o(i.get_ofl_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = get_ofl_info &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_erase
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prj_update
</UL>

<P><STRONG><a name="[129]"></a>update_ofl_serialnum</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, ofl_prj_decoder.o(i.update_ofl_serialnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = update_ofl_serialnum &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_file_write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prj_update
</UL>

<P><STRONG><a name="[128]"></a>update_ofl_target_info</STRONG> (Thumb, 106 bytes, Stack size 1048 bytes, ofl_prj_decoder.o(i.update_ofl_target_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = update_ofl_target_info &rArr; ofl_file_read_start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timing_info
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read_end
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_prj_update
</UL>

<P><STRONG><a name="[f6]"></a>file_find</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, offline_file.o(i.file_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = file_find &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_ofl_file
</UL>

<P><STRONG><a name="[f7]"></a>file_mount</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, offline_file.o(i.file_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = file_mount &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_erase_chip
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_init
</UL>

<P><STRONG><a name="[f9]"></a>file_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, offline_file.o(i.file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = file_read &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_file_read
</UL>

<P><STRONG><a name="[b4]"></a>application_run</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, update.o(i.application_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = application_run &rArr; jump_to_app
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_check_and_run
</UL>

<P><STRONG><a name="[b3]"></a>check_app_validate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, update.o(i.check_app_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_app_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_range
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_check_and_run
</UL>

<P><STRONG><a name="[b5]"></a>jump_to_app</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, update.o(i.jump_to_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jump_to_app
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_run
</UL>

<P><STRONG><a name="[b8]"></a>test_range</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, update.o(i.test_range))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_app_validate
</UL>

<P><STRONG><a name="[12e]"></a>GPIO_PortClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(i.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[12c]"></a>GPIO_PortSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(i.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[a0]"></a>OLED_BufToPanel</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oled.o(i.OLED_BufToPanel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_BufToPanel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clr_scr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_EndDraw
</UL>

<P><STRONG><a name="[12d]"></a>oled_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oled.o(i.oled_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[a1]"></a>oled_write_cmd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, oled.o(i.oled_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oled_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[a2]"></a>oled_write_data</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, oled.o(i.oled_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_BufToPanel
</UL>

<P><STRONG><a name="[122]"></a>ofl_diplay_str</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ofl_menu.o(i.ofl_diplay_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ofl_diplay_str &rArr; oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_display
</UL>

<P><STRONG><a name="[123]"></a>ofl_diplay_str_inv</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ofl_menu.o(i.ofl_diplay_str_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ofl_diplay_str_inv &rArr; oled_display_str &rArr; OLED_PutPixel &rArr; oled_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_str
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ofl_display
</UL>

<P><STRONG><a name="[8c]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[9f]"></a>I2C_TransferCommonIRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsl_i2c.o(i.I2C_TransferCommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferCommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_DriverIRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>DSPI_CommonIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_dspi.o(i.DSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DSPI_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>DSPI_IsMaster</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_IsMaster))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>copy_flash_common_bit_operation</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_flash.o(i.copy_flash_common_bit_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_flash_common_bit_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[99]"></a>copy_flash_run_command</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_flash.o(i.copy_flash_run_command))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[93]"></a>flash_cache_clear_process</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_cache_clear_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_cache_clear_process &rArr; fmc_flash_prefetch_speculation_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flash_prefetch_speculation_clear
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flash_cache_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
</UL>

<P><STRONG><a name="[97]"></a>flash_check_execute_in_ram_function_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_execute_in_ram_function_info))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[91]"></a>flash_check_range</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, fsl_flash.o(i.flash_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[92]"></a>flash_check_user_key</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_user_key))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[94]"></a>flash_command_sequence</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_command_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[90]"></a>flash_get_matched_operation_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_get_matched_operation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[b9]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[c8]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[e6]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[bd]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[c3]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[c6]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ca]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[cd]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[cc]"></a>dir_next</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[d2]"></a>dir_read</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[d4]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[cb]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[e4]"></a>find_volume</STRONG> (Thumb, 886 bytes, Stack size 80 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[d7]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[ed]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[d6]"></a>gen_numname</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[f4]"></a>get_fileinfo</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[e8]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[ee]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[cf]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[d5]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[c9]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[ba]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[d3]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[f0]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[ef]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[ce]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[f5]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[d0]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_window &rArr; disk_write &rArr; spi_flash_write &rArr; sf_page_write &rArr; sf_wait_busy &rArr; flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[e1]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[ae]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[b1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
